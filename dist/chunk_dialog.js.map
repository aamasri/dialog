{"version":3,"file":"chunk_dialog.js","mappings":"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","sources":["webpack://@aamasri/dialog/./src/dialog.js"],"sourcesContent":["/*\n * dialog.js\n * (c) 2020 Ananda Masri\n * Released under the MIT license\n * auro.technology/open-source/dialog\n */\n\n\nimport './dialog.styl';\nimport closeIcon from './close-icon.svg?src';\nimport fullscreenIcon from './fullscreen-icon.svg?src';\n\n\n// module scope vars\nconst debug = false;\nlet loadUrlBusy;\n\n\n/** launches a popup dialog configured by an options object\n *\n * @param {Object} options\n * @param {string|undefined} options.title - (optional) dialog title, source element title attribute (missing title => chromeless dialog)\n * @param {string|object|undefined} options.source - the content source: html content, selector, url(GET encoded data), or element\n * @param {string|undefined } options.fragment - (optional) selector by which to isolate a portion of the source HTML\n * @param {boolean|undefined} options.modal - (default false) page background dimming\n * @param {boolean|undefined} options.iframe - (default false) if the source is an url, whether to load it in an iFrame (adds a full-screen link to the source url)\n * @param {string|undefined} options.fullscreenUrl - (optional) forces a full-screen button (or for the case that fullscreen url differs from the source url)\n * @param {boolean|undefined} options.replace - (default true) whether to close any existing dialogs or layer up\n * @param {boolean|undefined} options.persistent - (default false) whether ESC/blur automatically closes the dialog\n * @param {function|string|undefined} options.onClose - (optional) function or eval(string) callback to execute after dialog dismissed\n * @param {string|undefined} options.classes - (optional) classes to apply to the dialog\n * @param {string|undefined} options.attributes - (optional) attributes to apply to the dialog\n *\n * @returns {Promise.<HTMLElement|Element|void>}\n */\nconst open = async function(options) {\n    options = options || {};\n    if (debug) console.debug('dialog.open invoked with options', options);\n\n    if (throttleEvent())\n        return;     // prevent multiple events from firing in quick succession\n\n    const dialogId = 'dialog-' + generateHash(options);\n    if (debug) console.log('id:', dialogId);\n    if (document.querySelector(`#${dialogId}:not(.closing)`)) {\n        if (debug) console.warn(`dialog with id \"${dialogId}\" already exists!`);\n        return;\n    }\n\n    await loadDependencies(); // jquery and anime.js\n    const $body = jQuery('body');\n\n    if (!options.title && !options.source) {\n        options.title = 'Dialog Cheat Sheet';\n        options.source = usageInstructions;\n    }\n\n    let dialogBody;\n    let dialogTitle = options.title || '';\n\n    // autodetect if specified source is an url (ie starts with \"http\" or \"/\")\n    const sourceIsUrl = typeof options.source === 'string' && (/^https?:\\/\\/[a-z]+/.test(options.source) || /^\\/[a-z]+/.test(options.source));\n\n    let useIframe = options.iframe && sourceIsUrl || false;\n    if (useIframe)\n        dialogBody = `<iframe src=\"${options.source}\"></iframe>`;\n\n    // selector or raw content?\n    if (!sourceIsUrl) {\n        if (debug) console.debug(`not url`);  // non-url source\n\n        try {\n            const sourceElement = document.querySelector(options.source);\n            if (debug) console.debug('source is an element');\n\n            if (sourceElement) {\n                dialogBody = sourceElement.innerHTML;\n                dialogTitle = dialogTitle || sourceElement.title || '';\n            }\n\n            if (debug) console.debug(`dialog title:${dialogTitle} \\n\\n body:${dialogBody}`);\n        } catch (error) {\n            // ignore error - just means options.source isn't a selector\n            if (debug) console.debug(`source \"${options.source}\" is not a selector`);\n        }\n\n        dialogBody = dialogBody || options.source || '';\n    }\n\n    options.replace = typeof options.replace === 'undefined' || !!options.replace;  // default true\n    if (options.replace)\n        closeAll(dialogId);     // close all existing dialogs (except identical to this one)\n\n    // build the dialog UI\n    const modalDiv = options.modal ? `<div class=\"dialog-modal\" data-for=\"${dialogId}\"></div>` : '';\n\n    const urlData = (useIframe || options.fullscreenUrl) ? `data-url=\"${options.fullscreenUrl || options.source}\"` : '';\n    const createdData = `data-created=\"${Date.now()}\"`;\n    const fullScreenIcon = (useIframe || options.fullscreenUrl) ? `<span class=\"icon-fullscreen\" title=\"Fullscreen\">${fullscreenIcon}</span>` : '';\n\n    let classes = [];\n    if (useIframe) classes.push('has-iframe');\n    if (!dialogTitle) classes.push('chromeless');\n    if (options.persistent) classes.push('persistent');\n    if (options.classes && typeof options.classes === 'string') classes.push(options.classes);\n\n    const attributes = options.attributes || '';\n\n    let $dialog = jQuery(`${modalDiv}\n                        <div id=\"${dialogId}\" class=\"dialog-box loading ${classes.join(' ')}\" ${attributes} ${createdData} ${urlData}>\n                            <div class=\"dialog-header\">\n                                <div class=\"title\">${dialogTitle}</div>\n                                <div class=\"icons\">\n                                    ${fullScreenIcon}\n                                    <span class=\"icon-close\">${closeIcon}</span>\n                                </div>\n                            </div>\n                            \n                            <div class=\"dialog-body\">\n                                ${(dialogBody || '<div class=\"dialog-loader\">Loading <div class=\"dialog-progress-bar\"></div></div>')}\n                            </div>\n                        </div>`);\n\n    $dialog.appendTo($body);\n    if (debug) console.debug(`dialog ${dialogId} appended to body`, $dialog.length);\n\n    // apply z-index to modal underlay and dialog box\n    const domUtils = await import(/* webpackChunkName: \"dom-utils\" */ '@aamasri/dom-utils');\n    if (debug) console.debug('dom-utils loaded', typeof domUtils);\n    const onTop = domUtils.onTopZIndex();\n    if (onTop)\n        $dialog.css('z-index', onTop);\n\n    let $modal;\n    if (options.modal) {\n        $modal = $body.find(`data-url[${dialogId}]`);\n        $dialog = $body.find(`#${dialogId}`);    // exclude the modal overlay div\n    }\n\n    initDialogListeners();   // dialog events: fullscreen, close (upon ESC, blur, close icon)\n\n    if (options.onClose)\n        bindCloseCallback($dialog, options.onClose);\n\n    let openAnimation = openAnimateDialog($dialog);\n\n    // fetch the url content\n    if (sourceIsUrl && !useIframe) {\n        // give urls a chance to load (with a timeout)\n        if (loadUrlBusy) {\n            console.warn('dialog cancelled because another dialog is loading');\n            if ($modal)\n                $modal.remove();\n\n            $dialog.remove();\n            return;\n        }\n\n        loadUrlBusy = window.setTimeout(() => {\n            loadUrlBusy = false;\n        }, 2000);\n\n\n        // CORS compatible request (allows non SSL sites to access content from SSL sites)\n        // with progress indicator\n        const $progressBar = $dialog.find('.dialog-progress-bar');\n        try {\n            dialogBody = await jQuery.ajax({\n                url: options.source,\n                xhr: () => {\n                    $progressBar.css('width', '40%');\n                    const xhr = new window.XMLHttpRequest();\n                    xhr.addEventListener('progress', evt => {\n                        if (evt.lengthComputable) {\n                            const loadProgress = evt.loaded / evt.total;\n                            $progressBar.css('width', `${loadProgress * 100}%`);\n                        }\n                    }, false);\n                    return xhr;\n                }\n            });\n\n            // mimics jQuery.load fragment functionality: isolate the specified selector within the returned content\n            if (options.fragment)\n                dialogBody = jQuery(dialogBody).find(options.fragment).html();\n\n            if (dialogBody.includes('<head')) {\n                dialogBody = `<iframe src=\"${options.source}\"></iframe>`;   // optimally the developer would have specified this option in the first place\n                $dialog.addClass('has-iframe');\n                console.warn('package @aamasri/dialog recommends using the \"iframe\" or \"fragment\" options when the loading a full HTML document!');\n            }\n\n        } catch (error) {\n            if (error.responseText)\n                dialogBody = error.responseText;    // backend error message\n            else if (error.statusText)              // backend error status eg. 404 Not Found\n                dialogBody = `Loading url ${options.source} failed with \"${error.statusText}\"`;\n            else\n                dialogBody = 'Loading url ${options.source} failed!';      // whoops - we've got no idea what went wrong\n        }\n\n        // allows us to test the url loading animation\n        if (debug) await new Promise(r => setTimeout(r, 3000));\n\n        loadUrlBusy = false;\n        $dialog.find('.dialog-body').html(dialogBody);\n\n        if (debug) console.debug('replace content:', $dialog.find('.dialog-body').html());\n\n        // animate dialog open again as it's remotely loaded content is probably bigger\n        openAnimation.pause();\n        openAnimation = openAnimateDialog($dialog);\n    }\n\n    await openAnimation.finished;   // resolved on animation complete\n    $dialog.find('.dialog-header .icons svg').fadeIn();     // this is really just to get Firefox to re-render them properly\n    $dialog.removeClass('loading');     // fully loaded\n\n    //if ($dialog.hasClass('remove-after-loaded'))\n    //  close($dialog);     // close was requested before the dialog was fully loaded - we delayed it until now to prevent errors\n\n    return $dialog[0];  // enables dialog element to be manipulated by invoker\n}\n\n\n\nfunction openAnimateDialog($dialog) {\n    if (debug) console.debug(`openAnimateDialog `, $dialog[0].id);\n\n    const $window = jQuery(window);\n\n    // dialog sizing\n    const dialogWidth = $dialog.width();\n    const dialogHeight = $dialog.height();\n    const dialogArea = dialogHeight * dialogWidth;\n    const windowWidth = $window.width();\n    const windowHeight = $window.height();\n    const windowArea = windowHeight * windowWidth;\n\n    const large = dialogArea/windowArea > 0.3;\n    if (large)\n        $dialog.addClass('large');\n\n    if (debug) console.debug(`area`, dialogArea/windowArea);\n\n    // focus/select first input element of any form content\n    const formInput = document.querySelector(`#${$dialog[0].id} .dialog-body input`);\n    if (formInput) {\n        formInput.focus();\n        formInput.select();\n    }\n\n    const wide = (dialogWidth / windowWidth) > 0.8;   // avoid overshooting the viewport (hence 2 animations)\n    const easing = wide || large ? 'cubicBezier(0.190, 1.000, 0.400, 1.000)' : 'easeOutElastic(1, 0.6)';\n\n    if (debug) console.debug(`wide ${wide}`, dialogWidth / windowWidth);\n\n    // launch animation\n    const animeConfig = {\n        targets: $dialog[0],\n        translateX: [ '-50%', '-50%' ],\n        translateY: [ '-50%', '-50%' ],\n        scale: [ 0, 1 ],\n        duration: 500,\n        easing: easing\n    };\n\n    // dialogs are initially hidden to allow measurement but prevent a flash of content\n    $dialog[0].style.visibility = 'visible';\n\n    return anime(animeConfig);   // run open animation\n}\n\n\nfunction executeCallback(callback) {\n    switch (typeof (callback)) {\n        case 'function':\n            callback();\n            return;\n\n        case 'string':\n            try {\n                eval(callback);\n            } catch (error) {\n                console.error('close callback failed with', error);\n            }\n    }\n}\n\n\n\n/** close/destroy all popup dialogs\n * @returns {void}\n */\nconst closeAll = function(exceptId) {\n    const dialogs = getAllDialogs(exceptId);\n    const modals = getAllModals(exceptId);\n\n    if (dialogs.length)\n        dialogs.forEach((dialog) => {\n            dialog.remove();\n        });\n\n    if (modals.length)\n        modals.forEach((modal) => {\n            modal.remove();\n        });\n\n    destroyDialogListeners();\n}\n\n\n/** close/destroy the topmost dialog\n * @returns {void}\n */\nconst closeLast = function() {\n    const dialogs = getAllDialogs();\n    if (dialogs.length) {\n        const lastDialog = dialogs[dialogs.length - 1];\n\n        // persistent dialogs don't close on blur\n        if (!lastDialog.classList.contains('persistent'))\n            close(lastDialog);\n    }\n}\n\n\n/** close/destroy the specified popup dialog\n * @param {object|jQuery|HTMLElement|Element } dialog\n * @returns {void}\n */\nconst close = function(dialog) {\n    if (typeof dialog !== 'object' || dialog === null)\n        return;\n    else if (jQuery) {\n        const $dialog = jQuery(dialog).closest('.dialog-box');\n        if ($dialog.length)\n            dialog = $dialog[0];\n        else\n            return;\n    } else if (dialog instanceof Element) {\n        dialog = dialog.closest('.dialog-box');\n        if (dialog === null)\n            return;\n    }\n\n    if (debug) console.debug(`  closing dialog`, dialog.id);\n\n    // removing a dialog that's still opening/loading will cause js errors\n    if (dialog.classList.contains('loading')) {\n        dialog.classList.add('remove-after-loaded');\n        if (debug) console.debug(`    cancelled because dialog is still loading`);\n        return;\n    }\n\n    dialog.classList.add('closing');\n\n    // close dialog animation\n    const animeConfig = {\n        targets: dialog,\n        translateX: [\n            { value: [ '-50%', '-50%' ] }\n        ],\n        translateY: [\n            { value: [ '-50%', '-50%' ] }\n        ],\n        scale: [\n            { value: [ 1, 0 ] }\n        ],\n        opacity: [\n            { value: [ 1, 0 ] }\n        ],\n        duration: 300,\n        easing: 'linear'\n    };\n\n    anime(animeConfig).finished.then(() => {\n        const relatedModal = getRelatedModal(dialog);\n        if (relatedModal)\n            relatedModal.remove();\n\n        dialog.remove();\n        destroyDialogListeners();\n    });\n}\n\n\nfunction getAllDialogs(exceptId) {\n    return document.querySelectorAll(`.dialog-box${exceptId ? `:not(#${exceptId})` : ''}`);\n}\n\nfunction getAllModals(exceptId) {\n    return document.querySelectorAll(`.dialog-modal${exceptId ? ':not([data-for=\"' + exceptId +'\"])' : ''}`);\n}\n\nfunction getRelatedModal(dialog) {\n    return document.querySelector(`.dialog-modal[data-for=\"${dialog.id}\"]`);\n}\n\nfunction getRelatedDialog(modal) {\n    const dialogId = modal.getAttribute('data-for');\n    return document.getElementById(dialogId);\n}\n\n\n// setup dialog blur event detection once (on the body element)\nlet blurHandlerBound = false;\nfunction initDialogListeners() {\n    if (blurHandlerBound)\n        return;\n\n    blurHandlerBound = true;\n    jQuery(document).on('click', docClickHandler);\n    jQuery(document).on('keydown', docKeyHandler);\n}\nfunction destroyDialogListeners() {\n    if (!blurHandlerBound || getAllDialogs().length)\n        return;     // handlers already destroyed or dialogs still open\n\n    jQuery(document).off('click', docClickHandler);\n    jQuery(document).off('keydown', docKeyHandler);\n    blurHandlerBound = false;\n\n    if (debug) console.debug(`destroyed dialog click and key event listeners`);\n}\n\n\nfunction docKeyHandler(event) {\n    if (debug) console.debug(`key pressed`, event.key);\n    if (event.key === 'Escape') {\n        // ESC on a form input first blurs the form - then closes the top dialog\n        if (document.activeElement && document.activeElement.nodeName !== \"BODY\") {\n            if (debug) console.debug(`blurring`, document.activeElement.nodeName);\n            document.activeElement.blur();\n        } else\n            closeLast();\n    }\n}\n\nfunction docClickHandler(event) {\n    if (throttleEvent())\n        return;     // prevent multiple events from firing in quick succession\n\n    const clicked = event.target;\n\n    if (!clicked.parentNode)\n        return;     // This ignores clicks on enclosed ckeditor content - which we can't always handle correctly\n\n    if (debug)\n        console.debug(`clicked on ${clicked.nodeName} \"${(clicked.innerText || '').substring(0,10)}..\"`, clicked, clicked.parentNode);\n\n    // interacting with a dialog only closes any later/on-top dialogs\n    const closestDialogBox = clicked.closest('.dialog-box');\n    console.log(`  closest dialog`, closestDialogBox);\n    if (closestDialogBox) {\n        if (debug) console.debug(`  clicked on dialog`, closestDialogBox.id);\n        const createdAt = closestDialogBox.getAttribute('data-created');\n\n        getAllDialogs().forEach(dialog => {\n            if (dialog.getAttribute('data-created') > createdAt)\n                close(dialog);\n        });\n\n        if (clicked.closest('.icon-close')) {\n            if (debug) console.debug(`  clicked on dialog close button`);\n            close(closestDialogBox);\n        }\n\n        if (clicked.closest('.icon-fullscreen')) {\n            const url = closestDialogBox.getAttribute('data-url');\n            if (debug) console.debug(`  clicked on dialog fullscreen button`, url);\n            window.open(url, '_self');\n        }\n\n        return;\n    }\n\n    // clicking on a modal overlay closes its related dialog, and all later/on-top dialogs/modals\n    const closestModalOverlay = clicked.closest('.dialog-modal');\n    if (closestModalOverlay) {\n        const relatedDialog = getRelatedDialog(closestModalOverlay);\n        if (relatedDialog) {\n            if (debug) console.debug(`  clicked on modal for dialog`, relatedDialog.id);\n\n            const createdAt = relatedDialog.getAttribute('data-created');\n\n            getAllDialogs().forEach(dialog => {\n                if (dialog.getAttribute('data-created') >= createdAt) {\n\n                    // persistent dialogs don't close on blur\n                    if (!dialog.classList.contains('persistent'))\n                        close(dialog);\n                }\n            });\n        } else\n        if (debug) console.debug(`  clicked on a modal but it's related dialog is no longer in the DOM`);\n\n        return;\n    }\n\n    closeLast();    // click was not on a dialog or modal\n}\n\n\n\n\n\n\nfunction bindCloseCallback($dialog, callback) {\n\n// Create an observer instance linked to the callback function\n    const observer = new MutationObserver((mutationsList) => {\n        mutationsList.forEach((mutation) => {\n            mutation.removedNodes.forEach((node) => {\n                if ($dialog.is(jQuery(node))) {\n                    if (debug) console.debug('dialog removed:', node);\n                    executeCallback(callback);\n                }\n            });\n        });\n    });\n\n// Start observing the target node for configured mutations\n    observer.observe(document.querySelector('body'), { childList: true, subtree: true });\n}\n\n\n\n\n// lazy load jquery and anime.js\nasync function loadDependencies() {\n    if (window.jQuery === undefined) {\n        window.jQuery = await import(/* webpackChunkName: \"jquery\" */ 'jquery');\n        window.jQuery = window.jQuery.default;\n    }\n    if (debug) console.debug('jQuery loaded', typeof window.jQuery);\n\n    if (window.anime === undefined) {\n        window.anime = await import(/* webpackChunkName: \"anime\" */ 'animejs/lib/anime.es.js');\n        window.anime = window.anime.default;\n    }\n    if (debug) console.debug('anime.js loaded', typeof window.anime);\n}\n\n\n\n\n// used to suppress identical duplicate dialogs from opening in quick succession\nfunction generateHash(object) {\n    const json = JSON.stringify(object);\n\n    let hash = 0;\n    for (let i = 0; i < json.length; i++) {\n        hash = ((hash << 5) - hash) + json.charCodeAt(i);\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    if (debug) console.log(`generateHash: ${hash} for\\n`, json);\n    // Return the hash\n    return hash;\n}\n\n\n// prevent multiple events from firing in quick succession\nlet eventTimestamp = 0;\nfunction throttleEvent() {\n    const now = Date.now();\n    if (debug) console.log('last event fired', Math.round((now - eventTimestamp)/1000), 'seconds ago');\n    if ((eventTimestamp + 500) > now)\n        return true;\n\n    eventTimestamp = now;\n    return false;\n}\n\n\n\nconst usageInstructions = `Usage instructions for developers: \n<pre style=\"color:#888; font-size: 12px;\">\noptions object {\n    title:      string              dialog title or source element title attribute\n    source:     string | object     the content source: html content, selector, url, or element\n    fragment:   selector            selector by which to isolate a portion of the source HTML\n    modal:      boolean             page background dimming\n    iframe:     boolean             if the source is a url, whether to load it in an iFrame\n    replace:    boolean             whether to close any existing dialogs or layer up\n    persistent: boolean             whether ESC/blur automatically closes the dialog\n    onClose:    function | string   callback function or eval(string) to execute after dialog dismissed\n    classes:    string              classes to apply to the dialog container element\n    attributes: string              attributes to apply to the dialog container element eg. 'data-ignore-events=\"true\"'\n}\n</pre>\n\n<pre style=\"color: royalblue;  font-size: 12px;\">\ndialog.open(options).then(function() {\n    console.log('dialog launched');\n});\n</pre>`;\n\n\nexport { open, close, closeLast, closeAll };"],"names":["debug","loadUrlBusy","open","async","options","console","throttleEvent","dialogId","generateHash","log","document","querySelector","warn","loadDependencies","$body","jQuery","dialogBody","title","source","usageInstructions","dialogTitle","sourceIsUrl","test","useIframe","iframe","sourceElement","innerHTML","error","replace","closeAll","modalDiv","modal","urlData","fullscreenUrl","createdData","Date","now","fullScreenIcon","fullscreenIcon","classes","push","persistent","attributes","$dialog","join","closeIcon","appendTo","length","domUtils","onTop","onTopZIndex","$modal","css","find","initDialogListeners","onClose","bindCloseCallback","openAnimation","openAnimateDialog","remove","window","setTimeout","$progressBar","ajax","url","xhr","XMLHttpRequest","addEventListener","evt","lengthComputable","loadProgress","loaded","total","fragment","html","includes","addClass","responseText","statusText","Promise","r","pause","finished","fadeIn","removeClass","id","$window","dialogWidth","width","dialogArea","height","windowWidth","windowArea","large","formInput","focus","select","wide","easing","animeConfig","targets","translateX","translateY","scale","duration","style","visibility","anime","executeCallback","callback","eval","exceptId","dialogs","getAllDialogs","modals","getAllModals","forEach","dialog","destroyDialogListeners","closeLast","lastDialog","classList","contains","close","closest","Element","add","value","opacity","then","relatedModal","getRelatedModal","querySelectorAll","getRelatedDialog","getAttribute","getElementById","blurHandlerBound","on","docClickHandler","docKeyHandler","off","event","key","activeElement","nodeName","blur","clicked","target","parentNode","innerText","substring","closestDialogBox","createdAt","closestModalOverlay","relatedDialog","MutationObserver","mutationsList","mutation","removedNodes","node","is","observe","childList","subtree","undefined","default","object","json","JSON","stringify","hash","i","charCodeAt","eventTimestamp","Math","round"],"sourceRoot":""}