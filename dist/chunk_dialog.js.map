{"version":3,"file":"chunk_dialog.js","mappings":"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","sources":["webpack://@aamasri/dialog/./src/dialog.js","webpack://@aamasri/dialog/./node_modules/@aamasri/web-components/src/js/safe-eval.js"],"sourcesContent":["import './dialog.styl';\nimport closeIcon from './close-icon.svg?src';\nimport fullscreenIcon from './fullscreen-icon.svg?src';\nimport safeEval from \"@aamasri/web-components/src/js/safe-eval\";\n\n\n// module scope vars\nconst debug = false;\nlet loadUrlBusy;\n\n\n/** launches a popup dialog configured by an options object\n *\n * @param {Object} options\n * @param {string|undefined} options.title - (optional) dialog title, source element title attribute (missing title => chromeless dialog)\n * @param {string|object|undefined} options.source - the content source: html content, selector, url(GET encoded data), or element\n * @param {string|undefined } options.fragment - (optional) selector by which to isolate a portion of the source HTML\n * @param {boolean|undefined} options.modal - (default false) page background dimming\n * @param {boolean|undefined} options.iframe - (default false) if the source is an url, whether to load it in an iFrame (adds a full-screen link to the source url)\n * @param {string|undefined} options.fullscreenUrl - (optional) forces a full-screen button (or for the case that fullscreen url differs from the source url)\n * @param {boolean|undefined} options.replace - (default true) whether to close any existing dialogs or layer up\n * @param {boolean|undefined} options.persistent - (default false) whether ESC/blur automatically closes the dialog\n * @param {function|string|undefined} options.onClose - (optional) function or eval(string) callback to execute after dialog dismissed\n * @param {string|undefined} options.classes - (optional) classes to apply to the dialog\n * @param {string|undefined} options.attributes - (optional) attributes to apply to the dialog\n *\n * @returns {Promise.<HTMLElement|Element|void>}\n */\nconst open = async function(options) {\n    options = options || {};\n    if (debug) console.debug('dialog.open invoked with options', options);\n\n    if (throttleEvent())\n        return;     // prevent multiple events from firing in quick succession\n\n    const dialogId = 'dialog-' + generateHash(options);\n    if (debug) console.log('id:', dialogId);\n    if (document.querySelector(`#${dialogId}:not(.closing)`)) {\n        if (debug) console.warn(`dialog with id \"${dialogId}\" already exists!`);\n        return;\n    }\n\n    await loadDependencies(); // jquery and anime.js\n    const $body = jQuery('body');\n\n    if (!options.title && !options.source) {\n        options.title = 'Dialog Cheat Sheet';\n        options.source = usageInstructions;\n    }\n\n    let dialogBody;\n    let dialogTitle = options.title || '';\n\n    // autodetect if specified source is an url (ie starts with \"http\" or \"/\")\n    const sourceIsUrl = typeof options.source === 'string' && (/^https?:\\/\\/[a-z]+/.test(options.source) || /^\\/[a-z]+/.test(options.source));\n\n    let useIframe = options.iframe && sourceIsUrl || false;\n    if (useIframe)\n        dialogBody = `<iframe src=\"${options.source}\"></iframe>`;\n\n    // selector or raw content?\n    if (!sourceIsUrl) {\n        if (debug) console.debug(`not url`);  // non-url source\n\n        try {\n            const sourceElement = document.querySelector(options.source);\n            if (debug) console.debug('source is an element');\n\n            if (sourceElement) {\n                dialogBody = sourceElement.innerHTML;\n                dialogTitle = dialogTitle || sourceElement.title || '';\n            }\n\n            if (debug) console.debug(`dialog title:${dialogTitle} \\n\\n body:${dialogBody}`);\n        } catch (error) {\n            // ignore error - just means options.source isn't a selector\n            if (debug) console.debug(`source \"${options.source}\" is not a selector`);\n        }\n\n        dialogBody = dialogBody || options.source || '';\n    }\n\n    options.replace = typeof options.replace === 'undefined' || !!options.replace;  // default true\n    if (options.replace)\n        closeAll(dialogId);     // close all existing dialogs (except identical to this one)\n\n    // build the dialog UI\n    const modalDiv = options.modal ? `<div class=\"dialog-modal\" data-for=\"${dialogId}\"></div>` : '';\n\n    const urlData = (useIframe || options.fullscreenUrl) ? `data-url=\"${options.fullscreenUrl || options.source}\"` : '';\n    const createdData = `data-created=\"${Date.now()}\"`;\n    const fullScreenIcon = (useIframe || options.fullscreenUrl) ? `<span class=\"icon-fullscreen\" title=\"Fullscreen\">${fullscreenIcon}</span>` : '';\n\n    let classes = [];\n    if (useIframe) classes.push('has-iframe');\n    if (!dialogTitle) classes.push('chromeless');\n    if (options.persistent) classes.push('persistent');\n    if (options.classes && typeof options.classes === 'string') classes.push(options.classes);\n\n    const attributes = options.attributes || '';\n\n    let $dialog = jQuery(`${modalDiv}\n                        <div id=\"${dialogId}\" class=\"dialog-box loading ${classes.join(' ')}\" ${attributes} ${createdData} ${urlData}>\n                            <div class=\"dialog-header\">\n                                <div class=\"title\">${dialogTitle}</div>\n                                <div class=\"icons\">\n                                    ${fullScreenIcon}\n                                    <span class=\"icon-close\">${closeIcon}</span>\n                                </div>\n                            </div>\n                            \n                            <div class=\"dialog-body\">\n                                ${(dialogBody || '<div class=\"dialog-loader\">Loading <div class=\"dialog-progress-bar\"></div></div>')}\n                            </div>\n                        </div>`);\n\n    $dialog.appendTo($body);\n    if (debug) console.debug(`dialog ${dialogId} appended to body`, $dialog.length);\n\n    // apply z-index to modal underlay and dialog box\n    const domUtils = await import(/* webpackChunkName: \"dom-utils\" */ '@aamasri/web-components/src/js/dom-utils');\n    if (debug) console.debug('dom-utils loaded', typeof domUtils);\n    const onTop = domUtils.onTopZIndex();\n    if (onTop)\n        $dialog.css('z-index', onTop);\n\n    let $modal;\n    if (options.modal) {\n        $modal = $body.find(`data-url[${dialogId}]`);\n        $dialog = $body.find(`#${dialogId}`);    // exclude the modal overlay div\n    }\n\n    initDialogListeners();   // dialog events: fullscreen, close (upon ESC, blur, close icon)\n\n    if (options.onClose)\n        bindCloseCallback($dialog, options.onClose);\n\n    let openAnimation = openAnimateDialog($dialog);\n\n    // fetch the url content\n    if (sourceIsUrl && !useIframe) {\n        // give urls a chance to load (with a timeout)\n        if (loadUrlBusy) {\n            console.warn('dialog cancelled because another dialog is loading');\n            if ($modal)\n                $modal.remove();\n\n            $dialog.remove();\n            return;\n        }\n\n        loadUrlBusy = window.setTimeout(() => {\n            loadUrlBusy = false;\n        }, 2000);\n\n\n        // CORS compatible request (allows non SSL sites to access content from SSL sites)\n        // with progress indicator\n        const $progressBar = $dialog.find('.dialog-progress-bar');\n        try {\n            dialogBody = await jQuery.ajax({\n                url: options.source,\n                xhr: () => {\n                    $progressBar.css('width', '40%');\n                    const xhr = new window.XMLHttpRequest();\n                    xhr.addEventListener('progress', evt => {\n                        if (evt.lengthComputable) {\n                            const loadProgress = evt.loaded / evt.total;\n                            $progressBar.css('width', `${loadProgress * 100}%`);\n                        }\n                    }, false);\n                    return xhr;\n                }\n            });\n\n            // mimics jQuery.load fragment functionality: isolate the specified selector within the returned content\n            if (options.fragment)\n                dialogBody = jQuery(dialogBody).find(options.fragment).html();\n\n            if (dialogBody.includes('<head')) {\n                dialogBody = `<iframe src=\"${options.source}\"></iframe>`;   // optimally the developer would have specified this option in the first place\n                $dialog.addClass('has-iframe');\n                console.warn('package @aamasri/dialog recommends using the \"iframe\" or \"fragment\" options when the loading a full HTML document!');\n            }\n\n        } catch (error) {\n            if (error.responseText)\n                dialogBody = error.responseText;    // backend error message\n            else if (error.statusText)              // backend error status eg. 404 Not Found\n                dialogBody = `Loading url ${options.source} failed with \"${error.statusText}\"`;\n            else\n                dialogBody = 'Loading url ${options.source} failed!';      // whoops - we've got no idea what went wrong\n        }\n\n        // allows us to test the url loading animation\n        if (debug) await new Promise(r => setTimeout(r, 3000));\n\n        loadUrlBusy = false;\n        $dialog.find('.dialog-body').html(dialogBody);\n\n        if (debug) console.debug('replace content:', $dialog.find('.dialog-body').html());\n\n        // animate dialog open again as it's remotely loaded content is probably bigger\n        openAnimation.pause();\n        openAnimation = openAnimateDialog($dialog);\n    }\n\n    await openAnimation.finished;   // resolved on animation complete\n    $dialog.find('.dialog-header .icons svg').fadeIn();     // this is really just to get Firefox to re-render them properly\n    $dialog.removeClass('loading');     // fully loaded\n\n    //if ($dialog.hasClass('remove-after-loaded'))\n    //  close($dialog);     // close was requested before the dialog was fully loaded - we delayed it until now to prevent errors\n\n    return $dialog[0];  // enables dialog element to be manipulated by invoker\n}\n\n\n\nfunction openAnimateDialog($dialog) {\n    if (debug) console.debug(`openAnimateDialog `, $dialog[0].id);\n\n    const $window = jQuery(window);\n\n    // dialog sizing\n    const dialogWidth = $dialog.width();\n    const dialogHeight = $dialog.height();\n    const dialogArea = dialogHeight * dialogWidth;\n    const windowWidth = $window.width();\n    const windowHeight = $window.height();\n    const windowArea = windowHeight * windowWidth;\n\n    const large = dialogArea/windowArea > 0.3;\n    if (large)\n        $dialog.addClass('large');\n\n    if (debug) console.debug(`area`, dialogArea/windowArea);\n\n    // focus/select first input element of any form content\n    const formInput = document.querySelector(`#${$dialog[0].id} .dialog-body input`);\n    if (formInput) {\n        formInput.focus();\n        formInput.select();\n    }\n\n    const wide = (dialogWidth / windowWidth) > 0.8;   // avoid overshooting the viewport (hence 2 animations)\n    const easing = wide || large ? 'cubicBezier(0.190, 1.000, 0.400, 1.000)' : 'easeOutElastic(1, 0.6)';\n\n    if (debug) console.debug(`wide ${wide}`, dialogWidth / windowWidth);\n\n    // launch animation\n    const animeConfig = {\n        targets: $dialog[0],\n        translateX: [ '-50%', '-50%' ],\n        translateY: [ '-50%', '-50%' ],\n        scale: [ 0, 1 ],\n        duration: 500,\n        easing: easing\n    };\n\n    // dialogs are initially hidden to allow measurement but prevent a flash of content\n    $dialog[0].style.visibility = 'visible';\n\n    return anime(animeConfig);   // run open animation\n}\n\n\nfunction executeCallback(callback) {\n    switch (typeof (callback)) {\n        case 'function':\n            callback();\n            return;\n\n        case 'string':\n            try {\n                safeEval(callback);\n            } catch (error) {\n                console.error('close callback failed with', error);\n            }\n    }\n}\n\n\n\n/** close/destroy all popup dialogs\n * @returns {void}\n */\nconst closeAll = function(exceptId) {\n    const dialogs = getAllDialogs(exceptId);\n    const modals = getAllModals(exceptId);\n\n    if (dialogs.length)\n        dialogs.forEach((dialog) => {\n            dialog.remove();\n        });\n\n    if (modals.length)\n        modals.forEach((modal) => {\n            modal.remove();\n        });\n\n    destroyDialogListeners();\n}\n\n\n/** close/destroy the topmost dialog\n * @returns {void}\n */\nconst closeLast = function() {\n    const dialogs = getAllDialogs();\n    if (dialogs.length) {\n        const lastDialog = dialogs[dialogs.length - 1];\n\n        // persistent dialogs don't close on blur\n        if (!lastDialog.classList.contains('persistent'))\n            close(lastDialog);\n    }\n}\n\n\n/** close/destroy the specified popup dialog\n * @param {object|jQuery|HTMLElement|Element } dialog\n * @returns {void}\n */\nconst close = function(dialog) {\n    if (typeof dialog === 'string')\n        dialog = document.querySelector(dialog);        // get element from selector\n\n    else if (dialog instanceof jQuery)\n        dialog = dialog[0];                            // get element from jQuery collection\n\n    if (dialog === null || !dialog instanceof Element)\n        return;\n\n    dialog = dialog.closest('.dialog-box');     // get the enclosing dialog\n    if (dialog === null)\n        return;\n\n    if (debug) console.debug(`  closing dialog`, dialog.id);\n\n    // removing a dialog that's still opening/loading will cause js errors\n    if (dialog.classList.contains('loading')) {\n        dialog.classList.add('remove-after-loaded');\n        if (debug) console.debug(`    cancelled because dialog is still loading`);\n        return;\n    }\n\n    dialog.classList.add('closing');\n\n    // close dialog animation\n    const animeConfig = {\n        targets: dialog,\n        translateX: [\n            { value: [ '-50%', '-50%' ] }\n        ],\n        translateY: [\n            { value: [ '-50%', '-50%' ] }\n        ],\n        scale: [\n            { value: [ 1, 0 ] }\n        ],\n        opacity: [\n            { value: [ 1, 0 ] }\n        ],\n        duration: 300,\n        easing: 'linear'\n    };\n\n    anime(animeConfig).finished.then(() => {\n        const relatedModal = getRelatedModal(dialog);\n        if (relatedModal)\n            relatedModal.remove();\n\n        dialog.remove();\n        destroyDialogListeners();\n    });\n}\n\n\nfunction getAllDialogs(exceptId) {\n    return document.querySelectorAll(`.dialog-box${exceptId ? `:not(#${exceptId})` : ''}`);\n}\n\nfunction getAllModals(exceptId) {\n    return document.querySelectorAll(`.dialog-modal${exceptId ? ':not([data-for=\"' + exceptId +'\"])' : ''}`);\n}\n\nfunction getRelatedModal(dialog) {\n    return document.querySelector(`.dialog-modal[data-for=\"${dialog.id}\"]`);\n}\n\nfunction getRelatedDialog(modal) {\n    const dialogId = modal.getAttribute('data-for');\n    return document.getElementById(dialogId);\n}\n\n\n// setup dialog blur event detection once (on the body element)\nlet blurHandlerBound = false;\nfunction initDialogListeners() {\n    if (blurHandlerBound)\n        return;\n\n    blurHandlerBound = true;\n    jQuery(document).on('click', docClickHandler);\n    jQuery(document).on('keydown', docKeyHandler);\n}\nfunction destroyDialogListeners() {\n    if (!blurHandlerBound || getAllDialogs().length)\n        return;     // handlers already destroyed or dialogs still open\n\n    jQuery(document).off('click', docClickHandler);\n    jQuery(document).off('keydown', docKeyHandler);\n    blurHandlerBound = false;\n\n    if (debug) console.debug(`destroyed dialog click and key event listeners`);\n}\n\n\nfunction docKeyHandler(event) {\n    if (debug) console.debug(`key pressed`, event.key);\n    if (event.key === 'Escape') {\n        // ESC on a form input first blurs the form - then closes the top dialog\n        if (document.activeElement && document.activeElement.nodeName !== \"BODY\") {\n            if (debug) console.debug(`blurring`, document.activeElement.nodeName);\n            document.activeElement.blur();\n        } else\n            closeLast();\n    }\n}\n\nfunction docClickHandler(event) {\n    if (throttleEvent())\n        return;     // prevent multiple events from firing in quick succession\n\n    const clicked = event.target;\n\n    if (!clicked.parentNode)\n        return;     // This ignores clicks on enclosed ckeditor content - which we can't always handle correctly\n\n    if (debug)\n        console.debug(`clicked on ${clicked.nodeName} \"${(clicked.innerText || '').substring(0,10)}..\"`, clicked, clicked.parentNode);\n\n    // interacting with a dialog only closes any later/on-top dialogs\n    const closestDialogBox = clicked.closest('.dialog-box');\n    if (debug) console.log(`  closest dialog`, closestDialogBox);\n    if (closestDialogBox) {\n        if (debug) console.debug(`  clicked on dialog`, closestDialogBox.id);\n        const createdAt = closestDialogBox.getAttribute('data-created');\n\n        getAllDialogs().forEach(dialog => {\n            if (dialog.getAttribute('data-created') > createdAt)\n                close(dialog);\n        });\n\n        if (clicked.closest('.icon-close')) {\n            if (debug) console.debug(`  clicked on dialog close button`);\n            close(closestDialogBox);\n        }\n\n        if (clicked.closest('.icon-fullscreen')) {\n            const url = closestDialogBox.getAttribute('data-url');\n            if (debug) console.debug(`  clicked on dialog fullscreen button`, url);\n            window.open(url, '_self');\n        }\n\n        return;\n    }\n\n    // clicking on a modal overlay closes its related dialog, and all later/on-top dialogs/modals\n    const closestModalOverlay = clicked.closest('.dialog-modal');\n    if (closestModalOverlay) {\n        const relatedDialog = getRelatedDialog(closestModalOverlay);\n        if (relatedDialog) {\n            if (debug) console.debug(`  clicked on modal for dialog`, relatedDialog.id);\n\n            const createdAt = relatedDialog.getAttribute('data-created');\n\n            getAllDialogs().forEach(dialog => {\n                if (dialog.getAttribute('data-created') >= createdAt) {\n\n                    // persistent dialogs don't close on blur\n                    if (!dialog.classList.contains('persistent'))\n                        close(dialog);\n                }\n            });\n        } else\n        if (debug) console.debug(`  clicked on a modal but it's related dialog is no longer in the DOM`);\n\n        return;\n    }\n\n    closeLast();    // click was not on a dialog or modal\n}\n\n\n\n\n\n\nfunction bindCloseCallback($dialog, callback) {\n\n// Create an observer instance linked to the callback function\n    const observer = new MutationObserver((mutationsList) => {\n        mutationsList.forEach((mutation) => {\n            mutation.removedNodes.forEach((node) => {\n                if ($dialog.is(jQuery(node))) {\n                    if (debug) console.debug('dialog removed:', node);\n                    executeCallback(callback);\n                }\n            });\n        });\n    });\n\n// Start observing the target node for configured mutations\n    observer.observe(document.querySelector('body'), { childList: true, subtree: true });\n}\n\n\n\n\n// lazy load jquery and anime.js\nasync function loadDependencies() {\n    if (window.jQuery === undefined) {\n        window.jQuery = await import(/* webpackChunkName: \"jquery\" */ 'jquery');\n        window.jQuery = window.jQuery.default;\n    }\n    if (debug) console.debug('jQuery loaded', typeof window.jQuery);\n\n    if (window.anime === undefined) {\n        window.anime = await import(/* webpackChunkName: \"anime\" */ 'animejs/lib/anime.es.js');\n        window.anime = window.anime.default;\n    }\n    if (debug) console.debug('anime.js loaded', typeof window.anime);\n}\n\n\n\n\n// used to suppress identical duplicate dialogs from opening in quick succession\nfunction generateHash(object) {\n    const json = JSON.stringify(object);\n\n    let hash = 0;\n    for (let i = 0; i < json.length; i++) {\n        hash = ((hash << 5) - hash) + json.charCodeAt(i);\n        hash = hash & hash; // Convert to 32bit integer\n    }\n    if (debug) console.log(`generateHash: ${hash} for\\n`, json);\n    // Return the hash\n    return hash;\n}\n\n\n// prevent multiple events from firing in quick succession\nlet eventTimestamp = 0;\nfunction throttleEvent() {\n    const now = Date.now();\n    if (debug) console.log('last event fired', Math.round((now - eventTimestamp)/1000), 'seconds ago');\n    if ((eventTimestamp + 500) > now)\n        return true;\n\n    eventTimestamp = now;\n    return false;\n}\n\n\n\nconst usageInstructions = `Usage instructions for developers: \n<pre style=\"color:#888; font-size: 12px;\">\noptions object {\n    title:      string              dialog title or source element title attribute\n    source:     string | object     the content source: html content, selector, url, or element\n    fragment:   selector            selector by which to isolate a portion of the source HTML\n    modal:      boolean             page background dimming\n    iframe:     boolean             if the source is a url, whether to load it in an iFrame\n    replace:    boolean             whether to close any existing dialogs or layer up\n    persistent: boolean             whether ESC/blur automatically closes the dialog\n    onClose:    function | string   callback function or eval(string) to execute after dialog dismissed\n    classes:    string              classes to apply to the dialog container element\n    attributes: string              attributes to apply to the dialog container element eg. 'data-ignore-events=\"true\"'\n}\n</pre>\n\n<pre style=\"color: royalblue;  font-size: 12px;\">\ndialog.open(options).then(function() {\n    console.log('dialog launched');\n});\n</pre>`;\n\n\nexport { open, close, closeLast, closeAll };","export default function safeEval(code) {\n    // Check that code is a string to prevent potential vulnerabilities\n    if (typeof code !== 'string') {\n        throw new Error('Code must be a string');\n    }\n\n    try {\n        // Create and invoke a new function to evaluate the code\n        return new Function(`\"use strict\"; return (${code});`)();\n    } catch (error) {\n        console.error('Error evaluating code:', error);\n        return null;\n    }\n};"],"names":["loadUrlBusy","open","async","options","throttleEvent","dialogId","object","json","JSON","stringify","hash","i","length","charCodeAt","generateHash","document","querySelector","undefined","window","jQuery","default","anime","loadDependencies","$body","dialogBody","title","source","usageInstructions","dialogTitle","sourceIsUrl","test","useIframe","iframe","sourceElement","innerHTML","error","replace","closeAll","modalDiv","modal","urlData","fullscreenUrl","createdData","Date","now","fullScreenIcon","classes","push","persistent","attributes","$dialog","join","appendTo","domUtils","onTop","onTopZIndex","$modal","css","find","blurHandlerBound","on","docClickHandler","docKeyHandler","initDialogListeners","onClose","callback","observer","MutationObserver","mutationsList","forEach","mutation","removedNodes","node","is","code","Error","Function","console","safeEval","executeCallback","observe","childList","subtree","bindCloseCallback","openAnimation","openAnimateDialog","warn","remove","setTimeout","$progressBar","ajax","url","xhr","XMLHttpRequest","addEventListener","evt","lengthComputable","loadProgress","loaded","total","fragment","html","includes","addClass","responseText","statusText","pause","finished","fadeIn","removeClass","$window","dialogWidth","width","dialogArea","height","windowWidth","windowArea","large","formInput","id","focus","select","wide","easing","animeConfig","targets","translateX","translateY","scale","duration","style","visibility","exceptId","dialogs","getAllDialogs","modals","querySelectorAll","getAllModals","dialog","destroyDialogListeners","closeLast","lastDialog","classList","contains","close","Element","closest","add","value","opacity","then","relatedModal","getRelatedModal","off","event","key","activeElement","nodeName","blur","clicked","target","parentNode","closestDialogBox","createdAt","getAttribute","closestModalOverlay","relatedDialog","getElementById","getRelatedDialog","eventTimestamp"],"sourceRoot":""}