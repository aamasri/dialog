{"version":3,"file":"chunk_dialog.js","mappings":"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","sources":["webpack://@aamasri/dialog/./src/dialog.js"],"sourcesContent":["/*\n * dialog.js\n * (c) 2020 Ananda Masri\n * Released under the MIT license\n * auro.technology/open-source/dialog\n */\n\n\nimport './dialog.styl';\nimport closeIcon from './close-icon.svg?src';\nimport fullscreenIcon from './fullscreen-icon.svg?src';\n\n\n// module scope vars\nconst debug = false;\nlet loadUrlBusy;\nlet dialogCount = 0;\n\n\n/** launches a popup dialog configured by an options object\n *\n * @param {Object} options\n * @param {string|undefined} options.title - (optional) dialog title, source element title attribute (missing title => chromeless dialog)\n * @param {string|object|undefined} options.source - the content source: html content, selector, url(GET encoded data), or element\n * @param {string|undefined } options.fragment - (optional) selector by which to isolate a portion of the source HTML\n * @param {boolean|undefined} options.modal - (default false) page background dimming\n * @param {boolean|undefined} options.iframe - (default false) if the source is an url, whether to load it in an iFrame (adds a full-screen link to the source url)\n * @param {string|undefined} options.fullscreenUrl - (optional) forces a full-screen button (or for the case that fullscreen url differs from the source url)\n * @param {boolean|undefined} options.replace - (default true) whether to close any existing dialogs or layer up\n * @param {boolean|undefined} options.persistent - (default false) whether ESC/blur automatically closes the dialog\n * @param {function|string|undefined} options.onClose - (optional) function or eval(string) callback to execute after dialog dismissed\n * @param {string|undefined} options.classes - (optional) classes to apply to the dialog\n * @param {string|undefined} options.attributes - (optional) attributes to apply to the dialog\n *\n * @returns {Promise.<HTMLElement|Element|void>}\n */\nconst open = async function(options) {\n    options = options || {};\n\n    if (debug) console.debug('dialog.open invoked with options', options);\n\n    await loadDependencies(); // jquery and anime.js\n    const $body = jQuery('body');\n\n    if (!options.title && !options.source) {\n        options.title = 'Dialog Cheat Sheet';\n        options.source = usageInstructions;\n    }\n\n    // variables for constructing the dialog UI component\n\n    // globalize the dialog count (so that it's not reset on each dialog load) resulting in duplicate dialog ids\n    if (dialogCount === 0) {\n        let existingDialogs = document.querySelectorAll('.dialog-box');\n        if (existingDialogs.length) {\n            existingDialogs = [ ...existingDialogs ]; // converts NodeList to Array\n            existingDialogs.forEach(dialog => {\n                const count = parseInt(dialog.id.replace(/[^0-9]+/, ''));\n                if (count > dialogCount)\n                    dialogCount = count;\n\n                console.log(`found existing dialog #${dialog.id} --> dialogCount=${dialogCount} ${count}`);\n            });\n        }\n    }\n\n    let dialogId = `dialog-${++dialogCount}`;\n    let dialogBody;\n    let dialogTitle = options.title || '';\n\n    // autodetect if specified source is an url (ie starts with \"http\" or \"/\")\n    const sourceIsUrl = typeof options.source === 'string' && (/^https?:\\/\\/[a-z]+/.test(options.source) || /^\\/[a-z]+/.test(options.source));\n\n    let useIframe = options.iframe && sourceIsUrl || false;\n    if (useIframe)\n        dialogBody = `<iframe src=\"${options.source}\"></iframe>`;\n\n    // selector or raw content?\n    if (!sourceIsUrl) {\n        if (debug) console.debug(`not url`);  // non-url source\n\n        try {\n            const sourceElement = document.querySelector(options.source);\n            if (debug) console.debug('source is an element');\n\n            if (sourceElement) {\n                dialogBody = sourceElement.innerHTML;\n                dialogTitle = dialogTitle || sourceElement.title || '';\n            }\n\n            if (debug) console.debug(`dialog title:${dialogTitle} \\n\\n body:${dialogBody}`);\n        } catch (error) {\n            // ignore error - just means options.source isn't a selector\n            if (debug) console.debug(`source \"${options.source}\" is not a selector`);\n        }\n\n        dialogBody = dialogBody || options.source || '';\n    }\n\n    options.replace = typeof options.replace === 'undefined' || !!options.replace;  // default true\n    if (options.replace)\n        closeAll();     // close all existing dialogs\n\n    // build the dialog UI\n    const modalDiv = options.modal ? `<div class=\"dialog-modal\" data-for=\"${dialogId}\"></div>` : '';\n\n    const urlData = (useIframe || options.fullscreenUrl) ? `data-url=\"${options.fullscreenUrl || options.source}\"` : '';\n    const createdData = `data-created=\"${Date.now()}\"`;\n    const fullScreenIcon = (useIframe || options.fullscreenUrl) ? `<span class=\"icon-fullscreen\" title=\"Fullscreen\">${fullscreenIcon}</span>` : '';\n\n    let classes = [];\n    if (useIframe) classes.push('has-iframe');\n    if (!dialogTitle) classes.push('chromeless');\n    if (options.persistent) classes.push('persistent');\n    if (options.classes && typeof options.classes === 'string') classes.push(options.classes);\n\n    const attributes = options.attributes || '';\n\n    let $dialog = jQuery(`${modalDiv}\n                        <div id=\"${dialogId}\" class=\"dialog-box ${classes.join(' ')}\" ${attributes} ${createdData} ${urlData}>\n                            <div class=\"dialog-header\">\n                                <div class=\"title\">${dialogTitle}</div>\n                                <div class=\"icons\">\n                                    ${fullScreenIcon}\n                                    <span class=\"icon-close\">${closeIcon}</span>\n                                </div>\n                            </div>\n                            \n                            <div class=\"dialog-body\">\n                                ${(dialogBody || '<div class=\"dialog-loader\">Loading <div class=\"dialog-progress-bar\"></div></div>')}\n                            </div>\n                        </div>`);\n\n    $dialog.appendTo($body);\n\n    // apply z-index to modal underlay and dialog box\n    const domUtils = await import(/* webpackChunkName: \"dom-utils\" */ '@aamasri/dom-utils');\n    if (debug) console.debug('dom-utils loaded', typeof domUtils);\n    const onTop = domUtils.onTopZIndex();\n    if (onTop)\n        $dialog.css('z-index', onTop);\n\n    let $modal;\n    if (options.modal) {\n        $modal = $body.find(`data-url[${dialogId}]`);\n        $dialog = $body.find(`#${dialogId}`);    // exclude the modal overlay div\n    }\n\n    if (debug) console.debug(`dialog ${dialogId} appended to body`, $dialog.length);\n\n\n    initDialogListeners();   // dialog events: fullscreen, close(ESC, blur, close icon)\n\n    if (options.onClose)\n        bindCloseCallback($dialog, options.onClose);\n\n    let openAnimation = openAnimateDialog($dialog);\n\n    // fetch the url content\n    if (sourceIsUrl && !useIframe) {\n        // give urls a chance to load (with a timeout)\n        if (loadUrlBusy) {\n            console.warn('dialog cancelled because another dialog is loading');\n            if ($modal)\n                $modal.remove();\n\n            $dialog.remove();\n            return;\n        }\n\n        loadUrlBusy = window.setTimeout(() => {\n            loadUrlBusy = false;\n        }, 2000);\n\n\n        // CORS compatible request (allows non SSL sites to access content from SSL sites)\n        // with progress indicator\n        const $progressBar = $dialog.find('.dialog-progress-bar');\n        try {\n            dialogBody = await jQuery.ajax({\n                url: options.source,\n                xhr: () => {\n                    $progressBar.css('width', '40%');\n                    const xhr = new window.XMLHttpRequest();\n                    xhr.addEventListener('progress', evt => {\n                        if (evt.lengthComputable) {\n                            const loadProgress = evt.loaded / evt.total;\n                            $progressBar.css('width', `${loadProgress * 100}%`);\n                        }\n                    }, false);\n                    return xhr;\n                }\n            });\n\n            // mimics jQuery.load fragment functionality: isolate the specified selector within the returned content\n            if (options.fragment)\n                dialogBody = jQuery(dialogBody).find(options.fragment).html();\n\n            if (dialogBody.includes('<head')) {\n                dialogBody = `<iframe src=\"${options.source}\"></iframe>`;   // optimally the developer would have specified this option in the first place\n                $dialog.addClass('has-iframe');\n                console.warn('package @aamasri/dialog recommends using the \"iframe\" or \"fragment\" options when the loading a full HTML document!');\n            }\n\n        } catch (error) {\n            if (error.responseText)\n                dialogBody = error.responseText;    // backend error message\n            else if (error.statusText)              // backend error status eg. 404 Not Found\n                dialogBody = `Loading url ${options.source} failed with \"${error.statusText}\"`;\n            else\n                dialogBody = 'Loading url ${options.source} failed!';      // whoops - we've got no idea what went wrong\n        }\n\n        // allows us to test the url loading animation\n        if (debug) await new Promise(r => setTimeout(r, 3000));\n\n        loadUrlBusy = false;\n        $dialog.find('.dialog-body').html(dialogBody);\n\n        if (debug) console.debug('replace content:', $dialog.find('.dialog-body').html());\n\n        // animate dialog open again as it's remotely loaded content is probably bigger\n        openAnimation.pause();\n        openAnimation = openAnimateDialog($dialog);\n    }\n\n    await openAnimation.finished;   // resolved on animation complete\n    $dialog.find('.dialog-header .icons svg').fadeIn();     // this is really just to get Firefox to re-render them properly\n    return $dialog[0];  // enables dialog element to be manipulated by invoker\n}\n\n\n\nfunction openAnimateDialog($dialog) {\n    if (debug) console.debug(`openAnimateDialog `, $dialog[0].id);\n\n    const $window = jQuery(window);\n\n    // dialog sizing\n    const dialogWidth = $dialog.width();\n    const dialogHeight = $dialog.height();\n    const dialogArea = dialogHeight * dialogWidth;\n    const windowWidth = $window.width();\n    const windowHeight = $window.height();\n    const windowArea = windowHeight * windowWidth;\n\n    const large = dialogArea/windowArea > 0.3;\n    if (large)\n        $dialog.addClass('large');\n\n    if (debug) console.debug(`area`, dialogArea/windowArea);\n\n    // focus/select first input element of any form content\n    const formInput = document.querySelector(`#${$dialog[0].id} .dialog-body input`);\n    if (formInput) {\n        formInput.focus();\n        formInput.select();\n    }\n\n    const wide = (dialogWidth / windowWidth) > 0.8;   // avoid overshooting the viewport (hence 2 animations)\n    const easing = wide || large ? 'cubicBezier(0.190, 1.000, 0.400, 1.000)' : 'easeOutElastic(1, 0.6)';\n\n    if (debug) console.debug(`wide ${wide}`, dialogWidth / windowWidth);\n\n    // launch animation\n    const animeConfig = {\n        targets: $dialog[0],\n        translateX: [ '-50%', '-50%' ],\n        translateY: [ '-50%', '-50%' ],\n        scale: [ 0, 1 ],\n        duration: 500,\n        easing: easing\n    };\n\n    // dialogs are initially hidden to allow measurement but prevent a flash of content\n    $dialog[0].style.visibility = 'visible';\n\n    return anime(animeConfig);   // run open animation\n}\n\n\nfunction executeCallback(callback) {\n    switch (typeof (callback)) {\n        case 'function':\n            callback();\n            return;\n\n        case 'string':\n            try {\n                eval(callback);\n            } catch (error) {\n                console.error('close callback failed with', error);\n            }\n    }\n}\n\n\n\n/** close/destroy all popup dialogs\n * @returns {void}\n */\nconst closeAll = function() {\n    const dialogs = getAllDialogs();\n    const modals = getAllModals();\n\n    if (dialogs.length)\n        dialogs.forEach((dialog) => {\n            dialog.remove();\n        });\n\n    if (modals.length)\n        modals.forEach((modal) => {\n            modal.remove();\n        });\n}\n\n\n/** close/destroy the topmost dialog\n * @returns {void}\n */\nconst closeLast = function() {\n    const dialogs = getAllDialogs();\n    if (dialogs.length) {\n        const lastDialog = dialogs[dialogs.length - 1];\n\n        // persistent dialogs don't close on blur\n        if (!lastDialog.classList.contains('persistent'))\n            close(lastDialog);\n    }\n}\n\n\n/** close/destroy the specified popup dialog\n * @param {object|jQuery|HTMLElement|Element } dialog\n * @returns {void}\n */\nconst close = function(dialog) {\n    if (typeof dialog !== 'object' || dialog === null)\n        return;\n    else if (jQuery) {\n        const $dialog = jQuery(dialog).closest('.dialog-box');\n        if ($dialog.length)\n            dialog = $dialog[0];\n        else\n            return;\n    } else if (dialog instanceof Element) {\n        dialog = dialog.closest('.dialog-box');\n        if (dialog === null)\n            return;\n    }\n\n    if (debug) console.debug(`  closing dialog`, dialog.id);\n\n    // click that launched a dialog shouldn't also remove it\n    const createdAt = dialog.getAttribute('data-created');\n    if ((Date.now() - createdAt) < 500) {\n        if (debug) console.debug(`    cancelled because it's less than a second old`);\n        return;\n    }\n\n    if (debug) console.debug(`    dialog is ${Date.now() - createdAt} mS old`);\n\n    const relatedModal = getRelatedModal(dialog);\n\n    // close dialog animation\n    const animeConfig = {\n        targets: dialog,\n        translateX: [\n            { value: [ '-50%', '-50%' ] }\n        ],\n        translateY: [\n            { value: [ '-50%', '-50%' ] }\n        ],\n        scale: [\n            { value: [ 1, 0 ] }\n        ],\n        opacity: [\n            { value: [ 1, 0 ] }\n        ],\n        duration: 300,\n        easing: 'linear'\n    };\n\n    anime(animeConfig).finished.then(() => {\n        dialog.remove();\n\n        if (relatedModal)\n            relatedModal.remove();\n    });\n}\n\n\nfunction getAllDialogs() {\n    return document.querySelectorAll('.dialog-box');\n}\n\nfunction getAllModals() {\n    return document.querySelectorAll('.dialog-modal');\n}\n\nfunction getRelatedModal(dialog) {\n    return document.querySelector(`.dialog-modal[data-for=\"${dialog.id}\"]`);\n}\n\nfunction getRelatedDialog(modal) {\n    const dialogId = modal.getAttribute('data-for');\n    return document.getElementById(dialogId);\n}\n\n\n// setup dialog blur event detection once (on body element)\nlet blurHandlerBound = false;\nfunction initDialogListeners() {\n    if (blurHandlerBound)\n        return;\n\n    blurHandlerBound = true;\n\n    jQuery(document).on('click', (event) => {\n        const $clicked = jQuery(event.target);\n\n        if (debug) console.debug(`clicked on ${$clicked[0].nodeName} \"${$clicked.text().substring(0,10)}..\"`);\n\n        // interacting with a dialog only closes any later/on-top dialogs\n        const $closestDialogBox = $clicked.closest('.dialog-box');\n        if ($closestDialogBox.length) {\n            if (debug) console.debug(`  clicked on dialog`, $closestDialogBox[0].id);\n            const createdAt = $closestDialogBox[0].getAttribute('data-created');\n\n            getAllDialogs().forEach((dialog) => {\n                if (dialog.getAttribute('data-created') > createdAt)\n                    close(dialog);\n            });\n\n            if ($clicked.closest('.icon-close').length) {\n                if (debug) console.debug(`  clicked on dialog close button`);\n                close($closestDialogBox);\n            }\n\n            if ($clicked.closest('.icon-fullscreen').length) {\n                const url = $closestDialogBox.data('url');\n                if (debug) console.debug(`  clicked on dialog fullscreen button`, url);\n                window.open(url, '_self');\n            }\n\n            return;\n        }\n\n        // clicking on a modal overlay closes it, it's related dialog and all later/on-top dialogs/modals\n        const $closestModalOverlay = $clicked.closest('.dialog-modal');\n        if ($closestModalOverlay.length) {\n            const relatedDialog = getRelatedDialog($closestModalOverlay[0]);\n            if (relatedDialog) {\n                if (debug) console.debug(`  clicked on modal for dialog`, relatedDialog.id);\n\n                const createdAt = relatedDialog.getAttribute('data-created');\n\n                getAllDialogs().forEach((dialog) => {\n                    if (dialog.getAttribute('data-created') >= createdAt) {\n\n                        // persistent dialogs don't close on blur\n                        if (!dialog.classList.contains('persistent'))\n                            close(dialog);\n                    }\n                });\n            } else\n                if (debug) console.debug(`  clicked on a modal but it's related dialog is no longer in the DOM`);\n\n            return;\n        }\n\n        closeLast();    // click was not on a dialog or modal\n\n    }).on('keydown', (event) => {\n        if (debug) console.debug(`key pressed`, event.key);\n        if (event.key === 'Escape') {\n            // ESC on a form input first blurs the form - then closes the top dialog\n            if (document.activeElement && document.activeElement.nodeName !== \"BODY\") {\n                if (debug) console.debug(`blurring`, document.activeElement.nodeName);\n                document.activeElement.blur();\n            } else\n                closeLast();\n        }\n    });\n}\n\n\n\nfunction bindCloseCallback($dialog, callback) {\n\n// Create an observer instance linked to the callback function\n    const observer = new MutationObserver((mutationsList) => {\n        mutationsList.forEach((mutation) => {\n            mutation.removedNodes.forEach((node) => {\n                if ($dialog.is(jQuery(node))) {\n                    if (debug) console.debug('dialog removed:', node);\n                    executeCallback(callback);\n                }\n            });\n        });\n    });\n\n// Start observing the target node for configured mutations\n    observer.observe(document.querySelector('body'), { childList: true, subtree: true });\n}\n\n\n\n\n// lazy load jquery and anime.js\nasync function loadDependencies() {\n    if (window.jQuery === undefined) {\n        window.jQuery = await import(/* webpackChunkName: \"jquery\" */ 'jquery');\n        window.jQuery = window.jQuery.default;\n    }\n    if (debug) console.debug('jQuery loaded', typeof window.jQuery);\n\n    if (window.anime === undefined) {\n        window.anime = await import(/* webpackChunkName: \"anime\" */ 'animejs/lib/anime.es.js');\n        window.anime = window.anime.default;\n    }\n    if (debug) console.debug('anime.js loaded', typeof window.anime);\n}\n\n\n\nconst usageInstructions = `Usage instructions for developers: \n<pre style=\"color:#888; font-size: 12px;\">\noptions object {\n    title:      string              dialog title or source element title attribute\n    source:     string | object     the content source: html content, selector, url, or element\n    fragment:   selector            selector by which to isolate a portion of the source HTML\n    modal:      boolean             page background dimming\n    iframe:     boolean             if the source is a url, whether to load it in an iFrame\n    replace:    boolean             whether to close any existing dialogs or layer up\n    persistent: boolean             whether ESC/blur automatically closes the dialog\n    onClose:    function | string   callback function or eval(string) to execute after dialog dismissed\n    classes:    string              classes to apply to the dialog container element\n    attributes: string              attributes to apply to the dialog container element eg. 'data-ignore-events=\"true\"'\n}\n</pre>\n\n<pre style=\"color: royalblue;  font-size: 12px;\">\ndialog.open(options).then(function() {\n    console.log('dialog launched');\n});\n</pre>`;\n\n\nexport { open, close, closeLast, closeAll };"],"names":["debug","loadUrlBusy","dialogCount","open","async","options","console","loadDependencies","$body","jQuery","title","source","usageInstructions","existingDialogs","document","querySelectorAll","length","forEach","dialog","count","parseInt","id","replace","log","dialogBody","dialogId","dialogTitle","sourceIsUrl","test","useIframe","iframe","sourceElement","querySelector","innerHTML","error","closeAll","modalDiv","modal","urlData","fullscreenUrl","createdData","Date","now","fullScreenIcon","fullscreenIcon","classes","push","persistent","attributes","$dialog","join","closeIcon","appendTo","domUtils","onTop","onTopZIndex","$modal","css","find","initDialogListeners","onClose","bindCloseCallback","openAnimation","openAnimateDialog","warn","remove","window","setTimeout","$progressBar","ajax","url","xhr","XMLHttpRequest","addEventListener","evt","lengthComputable","loadProgress","loaded","total","fragment","html","includes","addClass","responseText","statusText","Promise","r","pause","finished","fadeIn","$window","dialogWidth","width","dialogArea","height","windowWidth","windowArea","large","formInput","focus","select","wide","easing","animeConfig","targets","translateX","translateY","scale","duration","style","visibility","anime","executeCallback","callback","eval","dialogs","getAllDialogs","modals","getAllModals","closeLast","lastDialog","classList","contains","close","closest","Element","createdAt","getAttribute","relatedModal","getRelatedModal","value","opacity","then","getRelatedDialog","getElementById","blurHandlerBound","on","event","$clicked","target","nodeName","text","substring","$closestDialogBox","data","$closestModalOverlay","relatedDialog","key","activeElement","blur","MutationObserver","mutationsList","mutation","removedNodes","node","is","observe","childList","subtree","undefined","default"],"sourceRoot":""}