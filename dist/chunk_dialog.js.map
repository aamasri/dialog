{"version":3,"file":"chunk_dialog.js","mappings":"+tBAcA,MAAMA,OAAQ,EACd,IAAIC,YACAC,YAAc,EACdC,MACAC,QAoBJC,eAAeC,KAAKC,SAChBA,QAAUA,SAAW,CAAC,EAElBP,OAAOQ,QAAQR,MAAM,mCAAoCO,cAGvCE,IAAlBC,OAAOC,SACPD,OAAOC,aAAe,wFACtBD,OAAOC,OAASD,OAAOC,OAAOC,SAG9BZ,OAAOQ,QAAQR,MAAM,uBAAwBU,OAAOC,aAEnCF,IAAjBC,OAAOG,QACPH,OAAOG,YAAc,kFACrBH,OAAOG,MAAQH,OAAOG,MAAMD,SAG5BZ,OAAOQ,QAAQR,MAAM,yBAA0BU,OAAOG,OAE1D,MAAMC,eAAiB,mFAEnBd,OAAOQ,QAAQR,MAAM,0BAA2Bc,UAEpDX,MAAQA,OAASW,SAASC,SAASZ,MACnCC,QAAUA,SAAWU,SAASC,SAASX,QAElCG,QAAQS,OAAUT,QAAQU,SAC3BV,QAAQS,MAAQ,qBAChBT,QAAQU,OAASC,mBAIrB,IACIC,WADAC,SAAY,aAAWlB,YAEvBmB,YAAcd,QAAQS,OAAS,GAGnC,MAAMM,YAAwC,iBAAnBf,QAAQU,SAAwB,qBAAqBM,KAAKhB,QAAQU,SAAW,YAAYM,KAAKhB,QAAQU,SAEjI,IAAIO,UAAYjB,QAAQkB,QAAUH,cAAe,EAKjD,GAJIE,YACAL,WAAc,gBAAeZ,QAAQU,sBAGpCK,YAAa,CACVtB,OAAOQ,QAAQR,MAAO,WAE1B,IACI,MAAM0B,cAAgBC,SAASC,cAAcrB,QAAQU,QACjDjB,OAAOQ,QAAQR,MAAM,wBAErB0B,gBACAP,WAAaO,cAAcG,UAC3BR,YAAcA,aAAeS,aAAaJ,gBAAkB,IAG5D1B,OAAOQ,QAAQR,MAAO,gBAAeqB,yBAAyBF,aAItE,CAHE,MAAOY,OAED/B,OAAOQ,QAAQR,MAAO,WAAUO,QAAQU,4BAChD,CAEAE,WAAaA,YAAcZ,QAAQU,QAAU,EACjD,CAEAV,QAAQyB,aAAqC,IAApBzB,QAAQyB,WAA6BzB,QAAQyB,QAClEzB,QAAQyB,SACRC,WAGJ,MAAMC,SAAW3B,QAAQ4B,MAAS,uCAAsCf,mBAAqB,GAEvFgB,QAAWZ,WAAajB,QAAQ8B,cAAkB,aAAY9B,QAAQ8B,eAAiB9B,QAAQU,UAAY,GAC3GqB,YAAe,iBAAgBC,KAAKC,SACpCC,eAAkBjB,WAAajB,QAAQ8B,cAAkB,oDAAmDK,qEAA0B,GAE5I,IAAIC,QAAU,GACVnB,WAAWmB,QAAQC,KAAK,cACvBvB,aAAasB,QAAQC,KAAK,cAC3BrC,QAAQsC,YAAYF,QAAQC,KAAK,cACjCrC,QAAQoC,SAAsC,iBAApBpC,QAAQoC,SAAsBA,QAAQC,KAAKrC,QAAQoC,SAEjF,MAAMG,WAAavC,QAAQuC,YAAc,GAEzC,IAAIC,QAAUpC,OAAQ,GAAEuB,8CACOd,+BAA+BuB,QAAQK,KAAK,SAASF,cAAcR,eAAeF,yHAEhEf,+GAEfoB,gFACyBQ,mQAK5B9B,YAAc,sHAI7C4B,QAAQG,SAAS/C,OAGjB,MAAMgD,MAAQrC,SAASsC,cAIvB,IAAIC,OAHAF,OACAJ,QAAQO,IAAI,UAAWH,OAGvB5C,QAAQ4B,QACRkB,OAASlD,MAAMoD,KAAM,YAAWnC,aAChC2B,QAAU5C,MAAMoD,KAAM,IAAGnC,aAGzBpB,OAAOQ,QAAQR,MAAO,UAASoB,4BAA6B2B,QAAQS,QAGxEC,sBAEIlD,QAAQmD,SACRC,kBAAkBZ,QAASxC,QAAQmD,SAEvC,IAAIE,cAAgBC,kBAAkBd,SAGtC,GAAIzB,cAAgBE,UAAW,CAE3B,GAAIvB,YAMA,OALAO,QAAQsD,KAAK,2DACTT,QACAA,OAAOU,cAEXhB,QAAQgB,SAIZ9D,YAAcS,OAAOsD,YAAW,WAC5B/D,aAAc,CAClB,GAAG,KAIH,IACIkB,iBAAmBR,OAAOsD,IAAI1D,QAAQU,QACtCE,WAAaZ,QAAQ2D,SAAWvD,OAAOQ,YAAYoC,KAAKhD,QAAQ2D,UAAUC,OAAShD,WAE/EA,WAAWiD,SAAS,WACpBjD,WAAc,gBAAeZ,QAAQU,oBACrC8B,QAAQsB,SAAS,cACjB7D,QAAQsD,KAAK,sHAUrB,CAPE,MAAO/B,OAEDZ,WADAY,MAAMuC,aACOvC,MAAMuC,aACdvC,MAAMwC,WACG,eAAchE,QAAQU,uBAAuBc,MAAMwC,cAEpD,uCACrB,CAEA7D,OAAOsD,YAAW,KACd/D,aAAc,EACd8C,QAAQQ,KAAK,gBAAgBY,KAAKhD,YAE9BnB,OAAOQ,QAAQR,MAAM,mBAAoB+C,QAAQQ,KAAK,gBAAgBY,QAG1EP,cAAcY,QACdZ,cAAgBC,kBAAkBd,QAAQ,GAC3C/C,MAAQ,IAAQ,EACvB,CAKA,aAHM4D,cAAca,SACpB1B,QAAQQ,KAAK,6BAA6BmB,SAC1CC,qBAAqB5B,SACdA,QAAQ,EACnB,CAIA,SAAS4B,qBAAqB5B,SACtB/C,OAAOQ,QAAQR,MAAO,yBAAyB+C,QAAQ,GAAG6B,IAE9D,MAAMC,aAAe9B,QAAQQ,KAAK,kBAClC,IAAKsB,aAAarB,OACd,OAEJqB,aAAaC,QAAQ,qCACrB,MAAMC,cAAgBF,aAAatB,KAAK,kBAGxC1C,MAAM,CACFmE,QAASD,cAAc,GACvBE,WAAY,CACR,CAAEC,MAAOL,aAAaM,QAASC,SAAU,IAAMC,MAAO,GACtD,CAAEH,MAAO,EAAGE,SAAU,IAAMC,MAAO,IAEvCC,OAAQ,CACJ,CAAEJ,MAAO,EAAGE,SAAU,IAAKC,MAAO,EAAGE,OAAQ,eAC7C,CAAEL,MAAO,EAAGE,SAAU,MACtB,CAAEF,MAAO,EAAGE,SAAU,IAAKC,MAAO,EAAGE,OAAQ,eAC7C,CAAEL,MAAO,EAAGE,SAAU,OAE1BG,OAAQ,wBACRC,MAAM,GAEd,CAIA,SAAS3B,kBAAkBd,SACnB/C,OAAOQ,QAAQR,MAAO,qBAAqB+C,QAAQ,GAAG6B,IAG1D,MAAMa,YAAc1C,QAAQoC,QAEtBO,WADe3C,QAAQ4C,SACKF,YAC5BG,YAAcxF,QAAQ+E,QAEtBU,WADezF,QAAQuF,SACKC,YAE5BE,MAAQJ,WAAWG,WAAa,GAClCC,OACA/C,QAAQsB,SAAS,SAEjBrE,OAAOQ,QAAQR,MAAO,OAAO0F,WAAWG,YAG5C,MAAME,UAAYpE,SAASC,cAAe,IAAGmB,QAAQ,GAAG6B,yBACpDmB,YACAA,UAAUC,QACVD,UAAUE,UAGd,MAAMC,KAAQT,YAAcG,YAAe,GACrCL,OAASW,MAAQJ,MAAQ,0CAA4C,yBAEvE9F,OAAOQ,QAAQR,MAAO,QAAOkG,OAAQT,YAAcG,aAGvD,MAAMO,YAAc,CAChBnB,QAASjC,QAAQ,GACjBkC,WAAY,CAAE,OAAQ,QACtBmB,WAAY,CAAE,OAAQ,QACtBC,MAAO,CAAE,EAAG,GACZjB,SAAU,IACVG,OAAQA,QAGZ,OAAO1E,MAAMsF,YACjB,CAGA,SAASG,gBAAgBC,UACrB,cAAgBA,UACZ,IAAK,WAED,YADAA,WAGJ,IAAK,SACD,IACIC,KAAKD,SAGT,CAFE,MAAOxE,OACLvB,QAAQuB,MAAM,6BAA8BA,MAChD,EAEZ,CAOA,SAASE,WACL,MAAMwE,QAAUC,gBACVC,OAASC,eAEXH,QAAQjD,QACRiD,QAAQI,SAASC,SACbA,OAAO/C,QAAQ,IAGnB4C,OAAOnD,QACPmD,OAAOE,SAAS1E,QACZA,MAAM4B,QAAQ,GAE1B,CAMA,SAASgD,YACL,MAAMN,QAAUC,gBAChB,GAAID,QAAQjD,OAAQ,CAChB,MAAMwD,WAAaP,QAAQA,QAAQjD,OAAS,GAGvCwD,WAAWC,UAAUC,SAAS,eAC/BC,MAAMH,WACd,CACJ,CAOA,SAASG,MAAML,QACX,MAAM/D,QAAUpC,OAAOmG,QAAQM,QAAQ,eACvC,IAAKrE,QAAQS,OACT,OAEJsD,OAAS/D,QAAQ,GAEb/C,OAAOQ,QAAQR,MAAO,mBAAmB8G,OAAOlC,IAGpD,MAAMyC,UAAYP,OAAOQ,aAAa,gBACtC,GAAK/E,KAAKC,MAAQ6E,UAAa,IAE3B,YADIrH,OAAOQ,QAAQR,MAAO,sDAI1BA,OAAOQ,QAAQR,MAAO,iBAAgBuC,KAAKC,MAAQ6E,oBAEvD,MAAME,aAAeC,gBAAgBV,QAqBrCjG,MAlBoB,CAChBmE,QAAS8B,OACT7B,WAAY,CACR,CAAEC,MAAO,CAAE,OAAQ,UAEvBkB,WAAY,CACR,CAAElB,MAAO,CAAE,OAAQ,UAEvBmB,MAAO,CACH,CAAEnB,MAAO,CAAE,EAAG,KAElBuC,QAAS,CACL,CAAEvC,MAAO,CAAE,EAAG,KAElBE,SAAU,IACVG,OAAQ,WAGOd,SAASiD,MAAK,KAC7BZ,OAAO/C,SAEHwD,cACAA,aAAaxD,QAAQ,GAGjC,CAGA,SAAS2C,gBACL,OAAO/E,SAASgG,iBAAiB,cACrC,CAEA,SAASf,eACL,OAAOjF,SAASgG,iBAAiB,gBACrC,CAEA,SAASH,gBAAgBV,QACrB,OAAOnF,SAASC,cAAe,2BAA0BkF,OAAOlC,OACpE,CAEA,SAASgD,iBAAiBzF,OACtB,MAAMf,SAAWe,MAAMmF,aAAa,YACpC,OAAO3F,SAASkG,eAAezG,SACnC,CAIA,IAAI0G,kBAAmB,EACvB,SAASrE,sBACDqE,mBAGJA,kBAAmB,EAEnBnH,OAAOgB,UAAUoG,GAAG,SAAUC,QAC1B,MAAMC,SAAWtH,OAAOqH,MAAME,QAE1BlI,OAAOQ,QAAQR,MAAO,cAAaiI,SAAS,GAAGE,aAAaF,SAASG,OAAOC,UAAU,EAAE,UAG5F,MAAMC,kBAAoBL,SAASb,QAAQ,eAC3C,GAAIkB,kBAAkB9E,OAAQ,CACtBxD,OAAOQ,QAAQR,MAAO,sBAAsBsI,kBAAkB,GAAG1D,IACrE,MAAMyC,UAAYiB,kBAAkB,GAAGhB,aAAa,gBAYpD,GAVAZ,gBAAgBG,SAASC,SACjBA,OAAOQ,aAAa,gBAAkBD,WACtCF,MAAML,OAAO,IAGjBmB,SAASb,QAAQ,eAAe5D,SAC5BxD,OAAOQ,QAAQR,MAAO,oCAC1BmH,MAAMmB,oBAGNL,SAASb,QAAQ,oBAAoB5D,OAAQ,CAC7C,MAAM+E,IAAMD,kBAAkBE,KAAK,OAC/BxI,OAAOQ,QAAQR,MAAO,wCAAwCuI,KAClE7H,OAAOJ,KAAKiI,IAAK,QACrB,CAEA,MACJ,CAGA,MAAME,qBAAuBR,SAASb,QAAQ,iBAC9C,GAAIqB,qBAAqBjF,OAAzB,CACI,MAAMkF,cAAgBd,iBAAiBa,qBAAqB,IAC5D,GAAIC,cAAe,CACX1I,OAAOQ,QAAQR,MAAO,gCAAgC0I,cAAc9D,IAExE,MAAMyC,UAAYqB,cAAcpB,aAAa,gBAE7CZ,gBAAgBG,SAASC,SACjBA,OAAOQ,aAAa,iBAAmBD,YAGlCP,OAAOG,UAAUC,SAAS,eAC3BC,MAAML,QACd,GAER,MACQ9G,OAAOQ,QAAQR,MAAO,uEAGlC,MAEA+G,WAAW,IAEZgB,GAAG,WAAYC,QACVhI,OAAOQ,QAAQR,MAAO,cAAcgI,MAAMW,KAC5B,WAAdX,MAAMW,MAEFhH,SAASiH,eAAqD,SAApCjH,SAASiH,cAAcT,UAC7CnI,OAAOQ,QAAQR,MAAO,WAAW2B,SAASiH,cAAcT,UAC5DxG,SAASiH,cAAcC,QAEvB9B,YACR,IAER,CAIA,SAASpD,kBAAkBZ,QAASwD,UAGf,IAAIuC,kBAAkBC,gBACnCA,cAAclC,SAASmC,WACnBA,SAASC,aAAapC,SAASqC,OACvBnG,QAAQoG,GAAGxI,OAAOuI,SACdlJ,OAAOQ,QAAQR,MAAM,kBAAmBkJ,MAC5C5C,gBAAgBC,UACpB,GACF,GACJ,IAIG6C,QAAQzH,SAASC,cAAc,QAAS,CAAEyH,WAAW,EAAMC,SAAS,GACjF,CAKA,SAASxH,aAAayH,SAClB,OAAIA,mBAAmB5I,OACZ4I,QAAQ,GAAGvI,OAASuI,QAAQf,KAAK,UAAY,GAE7Ce,QAAQvI,OAASL,OAAO4I,SAASf,KAAK,UAAY,EACjE,CAIA,MAAMtH,kBAAqB,opC,eCzgB3BsI,OAAOC,QAAU,m2B,eCAjBD,OAAOC,QAAU,8jD","sources":["webpack://@aamasri/dialog/./src/dialog.js","webpack://@aamasri/dialog/./src/close-icon.svg","webpack://@aamasri/dialog/./src/fullscreen-icon.svg"],"sourcesContent":["/*\n * dialog.js\n * (c) 2020 Ananda Masri\n * Released under the MIT license\n * auro.technology/open-source/dialog\n */\n\n\nimport './dialog.styl';\nimport closeIcon from './close-icon.svg';\nimport fullscreenIcon from './fullscreen-icon.svg';\n\n\n// module scope vars\nconst debug = false;\nlet loadUrlBusy;\nlet dialogCount = 0;\nlet $body;\nlet $window;\n\n\n/** launches a popup dialog configured by an options object\n *\n * @param {Object} options\n * @param {string|undefined} options.title - (optional) dialog title, source element title attribute (missing title => chromeless dialog)\n * @param {string|object|undefined} options.source - the content source: html content, selector, url(GET encoded data), or element\n * @param {string|undefined } options.fragment - (optional) selector by which to isolate a portion of the source HTML\n * @param {boolean|undefined} options.modal - (default false) page background dimming\n * @param {boolean|undefined} options.iframe - (default false) if the source is an url, whether to load it in an iFrame (adds a full-screen link to the source url)\n * @param {string|undefined} options.fullscreenUrl - (optional) forces a full-screen button (or for the case that fullscreen url differs from the source url)\n * @param {boolean|undefined} options.replace - (default true) whether to close any existing dialogs or layer up\n * @param {boolean|undefined} options.persistent - (default false) whether ESC/blur automatically closes the dialog\n * @param {function|string|undefined} options.onClose - (optional) function or eval(string) callback to execute after dialog dismissed\n * @param {string|undefined} options.classes - (optional) classes to apply to the dialog\n * @param {string|undefined} options.attributes - (optional) attributes to apply to the dialog\n *\n * @returns {Promise}\n */\nasync function open(options) {\n    options = options || {};\n\n    if (debug) console.debug('dialog.open invoked with options', options);\n\n    // lazy load dependencies\n    if (window.jQuery === undefined) {\n        window.jQuery = await import(/* webpackChunkName: \"jquery\" */ 'jquery');\n        window.jQuery = window.jQuery.default;\n    }\n\n    if (debug) console.debug('jQuery loaded', typeof window.jQuery);\n\n    if (window.anime === undefined) {\n        window.anime = await import(/* webpackChunkName: \"anime\" */ 'animejs/lib/anime.es.js');\n        window.anime = window.anime.default;\n    }\n\n    if (debug) console.debug('anime.js loaded', typeof window.anime);\n\n    const domUtils = await import(/* webpackChunkName: \"dom-utils\" */ '@aamasri/dom-utils');\n\n    if (debug) console.debug('dom-utils loaded', typeof domUtils);\n\n    $body = $body || domUtils.$cache().$body;\n    $window = $window || domUtils.$cache().$window;\n\n    if (!options.title && !options.source) {\n        options.title = 'Dialog Cheat Sheet';\n        options.source = usageInstructions;\n    }\n\n    // variables for constructing the dialog UI component\n    let dialogId = `dialog-${++dialogCount}`;\n    let dialogBody;\n    let dialogTitle = options.title || '';\n\n    // autodetect if specified source is an url (ie starts with \"http\" or \"/\")\n    const sourceIsUrl = typeof options.source === 'string' && (/^https?:\\/\\/[a-z]+/.test(options.source) || /^\\/[a-z]+/.test(options.source));\n\n    let useIframe = options.iframe && sourceIsUrl || false;\n    if (useIframe)\n        dialogBody = `<iframe src=\"${options.source}\"></iframe>`;\n\n    // selector or raw content?\n    if (!sourceIsUrl) {\n        if (debug) console.debug(`not url`);  // non-url source\n\n        try {\n            const sourceElement = document.querySelector(options.source);\n            if (debug) console.debug('source is an element');\n\n            if (sourceElement) {\n                dialogBody = sourceElement.innerHTML;\n                dialogTitle = dialogTitle || elementTitle(sourceElement) || '';\n            }\n\n            if (debug) console.debug(`dialog title:${dialogTitle} \\n\\n body:${dialogBody}`);\n        } catch (error) {\n            // ignore error - just means options.source isn't a selector\n            if (debug) console.debug(`source \"${options.source}\" is not a selector`);\n        }\n\n        dialogBody = dialogBody || options.source || '';\n    }\n\n    options.replace = typeof options.replace === 'undefined' || !!options.replace;  // default true\n    if (options.replace)\n        closeAll();     // close all existing dialogs\n\n    // build the dialog UI\n    const modalDiv = options.modal ? `<div class=\"dialog-modal\" data-for=\"${dialogId}\"></div>` : '';\n\n    const urlData = (useIframe || options.fullscreenUrl) ? `data-url=\"${options.fullscreenUrl || options.source}\"` : '';\n    const createdData = `data-created=\"${Date.now()}\"`;\n    const fullScreenIcon = (useIframe || options.fullscreenUrl) ? `<span class=\"icon-fullscreen\" title=\"Fullscreen\">${fullscreenIcon}</span>` : '';\n\n    let classes = [];\n    if (useIframe) classes.push('has-iframe');\n    if (!dialogTitle) classes.push('chromeless');\n    if (options.persistent) classes.push('persistent');\n    if (options.classes && typeof options.classes === 'string') classes.push(options.classes);\n\n    const attributes = options.attributes || '';\n\n    let $dialog = jQuery(`${modalDiv}\n                        <div id=\"${dialogId}\" class=\"dialog-box ${classes.join(' ')}\" ${attributes} ${createdData} ${urlData}>\n                            <div class=\"dialog-header\">\n                                <div class=\"title\">${dialogTitle}</div>\n                                <div class=\"icons\">\n                                    ${fullScreenIcon}\n                                    <span class=\"icon-close\">${closeIcon}</span>\n                                </div>\n                            </div>\n                            \n                            <div class=\"dialog-body\">\n                                ${(dialogBody || '<div class=\"dialog-loader\">Loading •••</div>')}\n                            </div>\n                        </div>`);\n\n    $dialog.appendTo($body);\n\n    // apply z-index to modal underlay and dialog box\n    const onTop = domUtils.onTopZIndex();\n    if (onTop)\n        $dialog.css('z-index', onTop);\n\n    let $modal;\n    if (options.modal) {\n        $modal = $body.find(`data-url[${dialogId}]`);\n        $dialog = $body.find(`#${dialogId}`);    // exclude the modal overlay div\n    }\n\n    if (debug) console.debug(`dialog ${dialogId} appended to body`, $dialog.length);\n\n\n    initDialogListeners();   // dialog events: fullscreen, close(ESC, blur, close icon)\n\n    if (options.onClose)\n        bindCloseCallback($dialog, options.onClose);\n\n    let openAnimation = openAnimateDialog($dialog);\n\n    // fetch the url content\n    if (sourceIsUrl && !useIframe) {\n        // give urls a chance to load (with a timeout)\n        if (loadUrlBusy) {\n            console.warn('dialog cancelled because another dialog is busy loading');\n            if ($modal)\n                $modal.remove();\n\n            $dialog.remove();\n            return;\n        }\n\n        loadUrlBusy = window.setTimeout(function () {\n            loadUrlBusy = false;\n        }, 2000);\n\n\n        // jQuery.get() is CORS compatible (allows non SSL http://site to access SSL https://site e.g. when login is SSL only)\n        try {\n            dialogBody = await jQuery.get(options.source);\n            dialogBody = options.fragment ? jQuery(dialogBody).find(options.fragment).html() : dialogBody;\t// if html fragment specified (mimics jQuery.load fragment functionality) then discard all but the specified selector content\n\n            if (dialogBody.includes('<head')) {\n                dialogBody = `<iframe src=\"${options.source}\"></iframe>`;   // optimally the developer would have specified this option in the first place\n                $dialog.addClass('has-iframe');\n                console.warn('package @aamasri/dialog recommends using the \"iframe\" or \"fragment\" options when the loading a full HTML document!');\n            }\n\n        } catch (error) {\n            if (error.responseText)\n                dialogBody = error.responseText;    // backend error message\n            else if (error.statusText)              // backend error status eg. 404 Not Found\n                dialogBody = `Loading url ${options.source} failed with \"${error.statusText}\"`;\n            else\n                dialogBody = 'Loading url ${options.source} failed!';      // whoops - we've got no idea what went wrong\n        }\n\n        window.setTimeout(() => {\n            loadUrlBusy = false;\n            $dialog.find('.dialog-body').html(dialogBody);\n\n            if (debug) console.debug('replace content:', $dialog.find('.dialog-body').html());\n\n            // animate dialog open again as it's remotely loaded content is probably bigger\n            openAnimation.pause();\n            openAnimation = openAnimateDialog($dialog);\n        }, debug ? 60000 : 0);\n    }\n\n    await openAnimation.finished;   // resolved on animation complete\n    $dialog.find('.dialog-header .icons svg').fadeIn();     // this is really just to get Firefox to re-render them properly\n    showLoadingAnimation($dialog);\n    return $dialog[0];  // enables dialog element to be manipulated by invoker\n}\n\n\n\nfunction showLoadingAnimation($dialog) {\n    if (debug) console.debug(`startLoadingAnimation `, $dialog[0].id);\n\n    const $loadingArea = $dialog.find('.dialog-loader');\n    if (!$loadingArea.length)\n        return;\n\n    $loadingArea.prepend('<div class=\"bouncing-ball\"></div>');   // add the bouncing ball\n    const $bouncingBall = $loadingArea.find('.bouncing-ball');\n\n    // launch bouncing ball loading animation\n    anime({\n        targets: $bouncingBall[0],\n        translateX: [\n            { value: $loadingArea.width(), duration: 4000, delay: 0 },\n            { value: 0, duration: 4000, delay: 0 },\n        ],\n        scaleX: [\n            { value: 8, duration: 800, delay: 0, easing: 'easeOutExpo' },\n            { value: 1, duration: 3200 },\n            { value: 8, duration: 800, delay: 0, easing: 'easeOutExpo' },\n            { value: 1, duration: 3200 }\n        ],\n        easing: 'easeOutElastic(1, .8)',\n        loop: true\n    });\n}\n\n\n\nfunction openAnimateDialog($dialog) {\n    if (debug) console.debug(`openAnimateDialog `, $dialog[0].id);\n\n    // dialog sizing\n    const dialogWidth = $dialog.width();\n    const dialogHeight = $dialog.height();\n    const dialogArea = dialogHeight * dialogWidth;\n    const windowWidth = $window.width();\n    const windowHeight = $window.height();\n    const windowArea = windowHeight * windowWidth;\n\n    const large = dialogArea/windowArea > 0.3;\n    if (large)\n        $dialog.addClass('large');\n\n    if (debug) console.debug(`area`, dialogArea/windowArea);\n\n    // focus/select first input element of any form content\n    const formInput = document.querySelector(`#${$dialog[0].id} .dialog-body input`);\n    if (formInput) {\n        formInput.focus();\n        formInput.select();\n    }\n\n    const wide = (dialogWidth / windowWidth) > 0.8;   // avoid overshooting the viewport (hence 2 animations)\n    const easing = wide || large ? 'cubicBezier(0.190, 1.000, 0.400, 1.000)' : 'easeOutElastic(1, 0.6)';\n\n    if (debug) console.debug(`wide ${wide}`, dialogWidth / windowWidth);\n\n    // launch animation\n    const animeConfig = {\n        targets: $dialog[0],\n        translateX: [ '-50%', '-50%' ],\n        translateY: [ '-50%', '-50%' ],\n        scale: [ 0, 1 ],\n        duration: 500,\n        easing: easing\n    };\n\n    return anime(animeConfig);   // run open animation\n}\n\n\nfunction executeCallback(callback) {\n    switch (typeof (callback)) {\n        case 'function':\n            callback();\n            return;\n\n        case 'string':\n            try {\n                eval(callback);\n            } catch (error) {\n                console.error('close callback failed with', error);\n            }\n    }\n}\n\n\n\n/** close/destroy all popup dialogs\n * @returns {void}\n */\nfunction closeAll() {\n    const dialogs = getAllDialogs();\n    const modals = getAllModals();\n\n    if (dialogs.length)\n        dialogs.forEach((dialog) => {\n            dialog.remove();\n        });\n\n    if (modals.length)\n        modals.forEach((modal) => {\n            modal.remove();\n        });\n}\n\n\n/** close/destroy the topmost dialog\n * @returns {void}\n */\nfunction closeLast() {\n    const dialogs = getAllDialogs();\n    if (dialogs.length) {\n        const lastDialog = dialogs[dialogs.length - 1];\n\n        // persistent dialogs don't close on blur\n        if (!lastDialog.classList.contains('persistent'))\n            close(lastDialog);\n    }\n}\n\n\n/** close/destroy the specified popup dialog\n * @param {object|jQuery|HTMLElement|Element } dialog\n * @returns {void}\n */\nfunction close(dialog) {\n    const $dialog = jQuery(dialog).closest('.dialog-box');\n    if (!$dialog.length)\n        return;\n\n    dialog = $dialog[0];\n\n    if (debug) console.debug(`  closing dialog`, dialog.id);\n\n    // click that launched a dialog shouldn't also remove it\n    const createdAt = dialog.getAttribute('data-created');\n    if ((Date.now() - createdAt) < 500) {\n        if (debug) console.debug(`    cancelled because it's less than a second old`);\n        return;\n    }\n\n    if (debug) console.debug(`    dialog is ${Date.now() - createdAt} mS old`);\n\n    const relatedModal = getRelatedModal(dialog);\n\n    // close dialog animation\n    const animeConfig = {\n        targets: dialog,\n        translateX: [\n            { value: [ '-50%', '-50%' ] }\n        ],\n        translateY: [\n            { value: [ '-50%', '-50%' ] }\n        ],\n        scale: [\n            { value: [ 1, 0 ] }\n        ],\n        opacity: [\n            { value: [ 1, 0 ] }\n        ],\n        duration: 300,\n        easing: 'linear'\n    };\n\n    anime(animeConfig).finished.then(() => {\n        dialog.remove();\n\n        if (relatedModal)\n            relatedModal.remove();\n    });\n\n}\n\n\nfunction getAllDialogs() {\n    return document.querySelectorAll('.dialog-box');\n}\n\nfunction getAllModals() {\n    return document.querySelectorAll('.dialog-modal');\n}\n\nfunction getRelatedModal(dialog) {\n    return document.querySelector(`.dialog-modal[data-for=\"${dialog.id}\"]`);\n}\n\nfunction getRelatedDialog(modal) {\n    const dialogId = modal.getAttribute('data-for');\n    return document.getElementById(dialogId);\n}\n\n\n// setup dialog blur event detection once (on body element)\nlet blurHandlerBound = false;\nfunction initDialogListeners() {\n    if (blurHandlerBound)\n        return;\n\n    blurHandlerBound = true;\n\n    jQuery(document).on('click', (event) => {\n        const $clicked = jQuery(event.target);\n\n        if (debug) console.debug(`clicked on ${$clicked[0].nodeName} \"${$clicked.text().substring(0,10)}..\"`);\n\n        // interacting with a dialog only closes any later/on-top dialogs\n        const $closestDialogBox = $clicked.closest('.dialog-box');\n        if ($closestDialogBox.length) {\n            if (debug) console.debug(`  clicked on dialog`, $closestDialogBox[0].id);\n            const createdAt = $closestDialogBox[0].getAttribute('data-created');\n\n            getAllDialogs().forEach((dialog) => {\n                if (dialog.getAttribute('data-created') > createdAt)\n                    close(dialog);\n            });\n\n            if ($clicked.closest('.icon-close').length) {\n                if (debug) console.debug(`  clicked on dialog close button`);\n                close($closestDialogBox);\n            }\n\n            if ($clicked.closest('.icon-fullscreen').length) {\n                const url = $closestDialogBox.data('url');\n                if (debug) console.debug(`  clicked on dialog fullscreen button`, url);\n                window.open(url, '_self');\n            }\n\n            return;\n        }\n\n        // clicking on a modal overlay closes it, it's related dialog and all later/on-top dialogs/modals\n        const $closestModalOverlay = $clicked.closest('.dialog-modal');\n        if ($closestModalOverlay.length) {\n            const relatedDialog = getRelatedDialog($closestModalOverlay[0]);\n            if (relatedDialog) {\n                if (debug) console.debug(`  clicked on modal for dialog`, relatedDialog.id);\n\n                const createdAt = relatedDialog.getAttribute('data-created');\n\n                getAllDialogs().forEach((dialog) => {\n                    if (dialog.getAttribute('data-created') >= createdAt) {\n\n                        // persistent dialogs don't close on blur\n                        if (!dialog.classList.contains('persistent'))\n                            close(dialog);\n                    }\n                });\n            } else\n                if (debug) console.debug(`  clicked on a modal but it's related dialog is no longer in the DOM`);\n\n            return;\n        }\n\n        closeLast();    // click was not on a dialog or modal\n\n    }).on('keydown', (event) => {\n        if (debug) console.debug(`key pressed`, event.key);\n        if (event.key === 'Escape') {\n            // ESC on a form input first blurs the form - then closes the top dialog\n            if (document.activeElement && document.activeElement.nodeName !== \"BODY\") {\n                if (debug) console.debug(`blurring`, document.activeElement.nodeName);\n                document.activeElement.blur();\n            } else\n                closeLast();\n        }\n    });\n}\n\n\n\nfunction bindCloseCallback($dialog, callback) {\n\n// Create an observer instance linked to the callback function\n    const observer = new MutationObserver((mutationsList) => {\n        mutationsList.forEach((mutation) => {\n            mutation.removedNodes.forEach((node) => {\n                if ($dialog.is(jQuery(node))) {\n                    if (debug) console.debug('dialog removed:', node);\n                    executeCallback(callback);\n                }\n            });\n        });\n    });\n\n// Start observing the target node for configured mutations\n    observer.observe(document.querySelector('body'), { childList: true, subtree: true });\n}\n\n\n\n\nfunction elementTitle(element) {\n    if (element instanceof jQuery)\n        return element[0].title || element.data('title') || '';\n    else\n        return element.title || jQuery(element).data('title') || '';\n}\n\n\n\nconst usageInstructions = `Usage instructions for developers: \n<pre style=\"color:#888; font-size: 12px;\">\noptions object {\n    title:      string              dialog title or source element title attribute\n    source:     string | object     the content source: html content, selector, url, or element\n    fragment:   selector            selector by which to isolate a portion of the source HTML\n    modal:      boolean             page background dimming\n    iframe:     boolean             if the source is a url, whether to load it in an iFrame\n    replace:    boolean             whether to close any existing dialogs or layer up\n    persistent: boolean             whether ESC/blur automatically closes the dialog\n    onClose:    function | string   callback function or eval(string) to execute after dialog dismissed\n    classes:    string              classes to apply to the dialog container element\n    attributes: string              attributes to apply to the dialog container element eg. 'data-ignore-events=\"true\"'\n}\n</pre>\n\n<pre style=\"color: royalblue;  font-size: 12px;\">\ndialog.open(options).then(function() {\n    console.log('dialog launched');\n});\n</pre>`;\n\n\nexport { open, close, closeLast, closeAll };","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"28 28 116 116\\\"><path d=\\\"M35.76335,28.59668c-2.91628,0.00077 -5.54133,1.76841 -6.63871,4.47035c-1.09737,2.70194 -0.44825,5.79937 1.64164,7.83336l45.09961,45.09961l-45.09961,45.09961c-1.8722,1.79752 -2.62637,4.46674 -1.97164,6.97823c0.65473,2.51149 2.61604,4.4728 5.12753,5.12753c2.51149,0.65473 5.18071,-0.09944 6.97823,-1.97165l45.09961,-45.09961l45.09961,45.09961c1.79752,1.87223 4.46675,2.62641 6.97825,1.97168c2.5115,-0.65472 4.47282,-2.61605 5.12755,-5.12755c0.65472,-2.5115 -0.09946,-5.18073 -1.97168,-6.97825l-45.09961,-45.09961l45.09961,-45.09961c2.11962,-2.06035 2.75694,-5.21064 1.60486,-7.93287c-1.15207,-2.72224 -3.85719,-4.45797 -6.81189,-4.37084c-1.86189,0.05548 -3.62905,0.83363 -4.92708,2.1696l-45.09961,45.09961l-45.09961,-45.09961c-1.34928,-1.38698 -3.20203,-2.16948 -5.13704,-2.1696z\\\"></path></svg>\"","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"21 21 130 130\\\"><path d=\\\"M35.83333,21.5c-7.83362,0 -14.33333,6.49972 -14.33333,14.33333v21.5c-0.03655,2.58456 1.32136,4.98858 3.55376,6.29153c2.2324,1.30295 4.99342,1.30295 7.22582,0c2.2324,-1.30295 3.59031,-3.70697 3.55376,-6.29153v-21.5h21.5c2.58456,0.03655 4.98858,-1.32136 6.29153,-3.55376c1.30295,-2.2324 1.30295,-4.99342 0,-7.22582c-1.30295,-2.2324 -3.70697,-3.59031 -6.29153,-3.55376zM114.66667,21.5c-2.58456,-0.03655 -4.98858,1.32136 -6.29153,3.55376c-1.30295,2.2324 -1.30295,4.99342 0,7.22582c1.30295,2.2324 3.70697,3.59031 6.29153,3.55376h21.5v21.5c-0.03655,2.58456 1.32136,4.98858 3.55376,6.29153c2.2324,1.30295 4.99342,1.30295 7.22582,0c2.2324,-1.30295 3.59031,-3.70697 3.55376,-6.29153v-21.5c0,-7.83362 -6.49972,-14.33333 -14.33333,-14.33333zM28.55469,107.40202c-3.95253,0.06178 -7.10882,3.312 -7.05469,7.26465v21.5c0,7.83362 6.49972,14.33333 14.33333,14.33333h21.5c2.58456,0.03655 4.98858,-1.32136 6.29153,-3.55376c1.30295,-2.2324 1.30295,-4.99342 0,-7.22582c-1.30295,-2.2324 -3.70697,-3.59031 -6.29153,-3.55376h-21.5v-21.5c0.02653,-1.93715 -0.73227,-3.80254 -2.10349,-5.17112c-1.37122,-1.36858 -3.23806,-2.12378 -5.17516,-2.09353zM143.22135,107.40202c-3.95253,0.06178 -7.10882,3.312 -7.05469,7.26465v21.5h-21.5c-2.58456,-0.03655 -4.98858,1.32136 -6.29153,3.55376c-1.30295,2.2324 -1.30295,4.99342 0,7.22582c1.30295,2.2324 3.70697,3.59031 6.29153,3.55376h21.5c7.83362,0 14.33333,-6.49972 14.33333,-14.33333v-21.5c0.02653,-1.93715 -0.73227,-3.80254 -2.10349,-5.17112c-1.37122,-1.36858 -3.23806,-2.12378 -5.17516,-2.09353z\\\"></path></svg>\""],"names":["debug","loadUrlBusy","dialogCount","$body","$window","async","open","options","console","undefined","window","jQuery","default","anime","domUtils","$cache","title","source","usageInstructions","dialogBody","dialogId","dialogTitle","sourceIsUrl","test","useIframe","iframe","sourceElement","document","querySelector","innerHTML","elementTitle","error","replace","closeAll","modalDiv","modal","urlData","fullscreenUrl","createdData","Date","now","fullScreenIcon","fullscreenIcon","classes","push","persistent","attributes","$dialog","join","closeIcon","appendTo","onTop","onTopZIndex","$modal","css","find","length","initDialogListeners","onClose","bindCloseCallback","openAnimation","openAnimateDialog","warn","remove","setTimeout","get","fragment","html","includes","addClass","responseText","statusText","pause","finished","fadeIn","showLoadingAnimation","id","$loadingArea","prepend","$bouncingBall","targets","translateX","value","width","duration","delay","scaleX","easing","loop","dialogWidth","dialogArea","height","windowWidth","windowArea","large","formInput","focus","select","wide","animeConfig","translateY","scale","executeCallback","callback","eval","dialogs","getAllDialogs","modals","getAllModals","forEach","dialog","closeLast","lastDialog","classList","contains","close","closest","createdAt","getAttribute","relatedModal","getRelatedModal","opacity","then","querySelectorAll","getRelatedDialog","getElementById","blurHandlerBound","on","event","$clicked","target","nodeName","text","substring","$closestDialogBox","url","data","$closestModalOverlay","relatedDialog","key","activeElement","blur","MutationObserver","mutationsList","mutation","removedNodes","node","is","observe","childList","subtree","element","module","exports"],"sourceRoot":""}